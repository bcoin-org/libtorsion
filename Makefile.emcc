# Makefile.emcc - emscripten makefile for libtorsion
# Copyright (c) 2020, Christopher Jeffrey (MIT License).
# https://github.com/bcoin-org/libtorsion

EMSCRIPTEN ?= /usr/lib/emscripten
CC = $(EMSCRIPTEN)/emcc
INITIAL_MEMORY ?= 16777216
MAX_MEMORY ?= 2147483648
STACK_SIZE ?= 5242880
ENVIRONMENT ?= node
ENABLE_DEBUG ?= 0
ENABLE_RNG ?= 1
ENABLE_TESTS ?= 1

#
# CFLAGS
#

COMMON_CFLAGS = -std=c89                  \
                -pedantic                 \
                -Wall                     \
                -Wextra                   \
                -Wcast-align              \
                -Wno-implicit-fallthrough \
                -Wno-long-long            \
                -Wno-overlength-strings   \
                -Wshadow                  \
                -I./include               \
                -O3

ifeq ($(ENABLE_DEBUG), 1)
COMMON_CFLAGS += -g
endif

#
# LDFLAGS
#

COMMON_LDFLAGS := -s SINGLE_FILE=1                    \
                  -s ASSERTIONS=0                     \
                  -s NODEJS_CATCH_EXIT=0              \
                  -s NODEJS_CATCH_REJECTION=0         \
                  -s ALLOW_MEMORY_GROWTH=1            \
                  -s INITIAL_MEMORY=$(INITIAL_MEMORY) \
                  -s MAXIMUM_MEMORY=$(MAX_MEMORY)     \
                  -s TOTAL_STACK=$(STACK_SIZE)        \
                  -s ENVIRONMENT=$(ENVIRONMENT)

#
# Sources/Objects
#

COMMON_SOURCES = src/aead.c     \
                 src/asn1.c     \
                 src/cipher.c   \
                 src/ecc.c      \
                 src/encoding.c \
                 src/drbg.c     \
                 src/dsa.c      \
                 src/hash.c     \
                 src/ies.c      \
                 src/internal.c \
                 src/kdf.c      \
                 src/mac.c      \
                 src/mpi.c      \
                 src/rsa.c      \
                 src/stream.c   \
                 src/util.c

RNG_SOURCES = src/entropy/env.c \
              src/entropy/hw.c  \
              src/entropy/sys.c \
              src/rand.c

ifeq ($(ENABLE_RNG), 1)
COMMON_SOURCES += $(RNG_SOURCES)
endif

COMMON_OBJECTS := $(subst .c,.o,$(COMMON_SOURCES))

#
# Library
#

LIB_SOURCES := $(COMMON_OBJECTS)
LIB_CFLAGS := $(COMMON_CFLAGS) -DTORSION_BUILD $(CFLAGS)
LIB_LDFLAGS := $(COMMON_LDFLAGS)                       \
               -s EXPORTED_FUNCTIONS=@etc/exports.json \
               $(LDFLAGS)

ifeq ($(ENABLE_DEBUG), 1)
LIB_CFLAGS += -DTORSION_DEBUG
endif

#
# Benchmarks
#

BENCH_SOURCES := $(COMMON_OBJECTS) test/bench.c test/hrtime.c
BENCH_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
BENCH_LDFLAGS := $(COMMON_LDFLAGS) $(LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
BENCH_CFLAGS += -DTORSION_HAVE_RNG
endif

#
# Tests
#

TEST_SOURCES := $(COMMON_OBJECTS) test/test.c
TEST_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
TEST_LDFLAGS := $(COMMON_LDFLAGS) $(LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
TEST_CFLAGS += -DTORSION_HAVE_RNG
endif

#
# Rules
#

OUTPUT = torsion.js
TESTS = torsion_bench.js torsion_test.js

ifeq ($(ENABLE_TESTS), 1)
OUTPUT += $(TESTS)
endif

HEADERS := $(shell find . -name '*.h')

all: $(OUTPUT)

%.o: %.c $(HEADERS)
	$(CC) -o $@ -c $(LIB_CFLAGS) $<

torsion.js: $(LIB_SOURCES)
	$(CC) -o $@ $(LIB_CFLAGS) $(LIB_LDFLAGS) $^

torsion_bench.js: $(BENCH_SOURCES)
	$(CC) -o $@ $(BENCH_CFLAGS) $(BENCH_LDFLAGS) $^

torsion_test.js: $(TEST_SOURCES)
	$(CC) -o $@ $(TEST_CFLAGS) $(TEST_LDFLAGS) $^

bench: torsion_bench.js
	@node $^

test: torsion_test.js
	@node $^

check: test

clean:
	$(RM) $(COMMON_OBJECTS) $(OUTPUT) $(TESTS)

.PHONY: all bench test check clean
