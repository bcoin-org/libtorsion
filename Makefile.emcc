# Makefile.emcc - emscripten makefile for libtorsion
# Copyright (c) 2020, Christopher Jeffrey (MIT License).
# https://github.com/bcoin-org/libtorsion

CC = emcc
INITIAL_MEMORY ?= 16777216
MAX_MEMORY ?= 2147483648
STACK_SIZE ?= 5242880
ENABLE_DEBUG ?= 1
ENABLE_RNG ?= 1

COMMON_CFLAGS = -std=gnu11                \
                -Wall                     \
                -Wextra                   \
                -Wcast-align              \
                -Wno-implicit-fallthrough \
                -Wshadow                  \
                -I./include               \
                -D__wasi__                \
                -O3

COMMON_LDFLAGS := -s WASM=1                           \
                  -s STANDALONE_WASM=1                \
                  -s WASM_BIGINT=1                    \
                  -s ALLOW_MEMORY_GROWTH=1            \
                  -s INITIAL_MEMORY=$(INITIAL_MEMORY) \
                  -s MAXIMUM_MEMORY=$(MAX_MEMORY)     \
                  -s TOTAL_STACK=$(STACK_SIZE)        \
                  -s ERROR_ON_UNDEFINED_SYMBOLS=0     \
                  -s WARN_ON_UNDEFINED_SYMBOLS=0

ifeq ($(ENABLE_DEBUG), 1)
COMMON_CFLAGS += -g -DTORSION_DEBUG
endif

COMMON_SOURCES = src/aead.c      \
                 src/asn1.c      \
                 src/cipher.c    \
                 src/ecc.c       \
                 src/encoding.c  \
                 src/drbg.c      \
                 src/dsa.c       \
                 src/hash.c      \
                 src/ies.c       \
                 src/internal.c  \
                 src/kdf.c       \
                 src/mac.c       \
                 src/mpi.c       \
                 src/rsa.c       \
                 src/stream.c    \
                 src/util.c

ifeq ($(ENABLE_RNG), 1)
COMMON_SOURCES += src/entropy/env.c \
                  src/entropy/hw.c  \
                  src/entropy/sys.c \
                  src/rand.c
endif

COMMON_OBJECTS := $(subst .c,.o,$(COMMON_SOURCES))

LIB_SOURCES := $(COMMON_OBJECTS)
LIB_CFLAGS := $(COMMON_CFLAGS) -DTORSION_BUILD $(CFLAGS)
LIB_LDFLAGS := $(COMMON_LDFLAGS) -s EXPORTED_FUNCTIONS=@etc/exports.json

BENCH_SOURCES := $(COMMON_OBJECTS) test/bench.c test/hrtime.c
BENCH_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
BENCH_LDFLAGS := $(COMMON_LDFLAGS)

TEST_SOURCES := $(COMMON_OBJECTS) test/test.c
TEST_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
TEST_LDFLAGS := $(COMMON_LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
BENCH_CFLAGS += -DTORSION_HAVE_RNG
TEST_CFLAGS += -DTORSION_HAVE_RNG
endif

OUTPUT = torsion.wasm torsion_bench.wasm torsion_test.wasm

all: $(OUTPUT)

%.o: %.c
	$(CC) -o $@ -c $(LIB_CFLAGS) $<

torsion.wasm: $(LIB_SOURCES)
	$(CC) -o $@ $(LIB_CFLAGS) $(LIB_LDFLAGS) $^

torsion_bench.wasm: $(BENCH_SOURCES)
	$(CC) -o $@ $(BENCH_CFLAGS) $(BENCH_LDFLAGS) $^

torsion_test.wasm: $(TEST_SOURCES)
	$(CC) -o $@ $(TEST_CFLAGS) $(TEST_LDFLAGS) $^

bench: torsion_bench.wasm
	@./scripts/wasi-run $^

test: torsion_test.wasm
	@./scripts/wasi-run $^

check: test

clean:
	rm -f $(OUTPUT)

.PHONY: all bench test check clean
