# Makefile.posix - posix makefile for libtorsion
# Copyright (c) 2020, Christopher Jeffrey (MIT License).
# https://github.com/bcoin-org/libtorsion

# Examples:
#
#  Static:
#
#    $ make -f Makefile.posix libtorsion.a
#
#  Shared:
#
#    $ make -f Makefile.posix libtorsion.so
#
#  Shared (Darwin):
#
#    $ make -f Makefile.posix SHARED_SUFFIX=.dylib libtorsion.dylib
#
#  Static (AIX+XL):
#
#    $ make -f Makefile.posix FPIC= libtorsion.a
#
#  Shared (AIX+XL):
#
#    $ make -f Makefile.posix FPIC=-qpic SHARED=-qmkshrobj libtorsion.so

PKG_VERSION = 0.0.0

#
# Options
#

LIB_PREFIX = lib
STATIC_SUFFIX = .a
SHARED_SUFFIX = .so
EXE_SUFFIX =
FPIC = -fPIC
SHARED = -shared

DESTDIR =
PREFIX = /usr/local

INITIAL_MEMORY = 16777216
MAX_MEMORY = 2147483648
STACK_SIZE = 5242880
ENVIRONMENT = node

#
# Binary Names
#

STATIC_NAME = $(LIB_PREFIX)torsion$(STATIC_SUFFIX)
SHARED_NAME = $(LIB_PREFIX)torsion$(SHARED_SUFFIX)
BENCH_NAME = torsion_bench$(EXE_SUFFIX)
TEST_NAME = torsion_test$(EXE_SUFFIX)
CTGRIND_NAME = torsion_ctgrind$(EXE_SUFFIX)

#
# Library
#

LIB_OBJECTS = src/aead.o        \
              src/asn1.o        \
              src/cipher.o      \
              src/ecc.o         \
              src/encoding.o    \
              src/entropy/env.o \
              src/entropy/hrt.o \
              src/entropy/hw.o  \
              src/entropy/sys.o \
              src/drbg.o        \
              src/dsa.o         \
              src/hash.o        \
              src/ies.o         \
              src/internal.o    \
              src/kdf.o         \
              src/mac.o         \
              src/mpi.o         \
              src/rand.o        \
              src/rsa.o         \
              src/stream.o      \
              src/util.o

LIB_CFLAGS = -I./include          \
             -DTORSION_BUILD      \
             -DTORSION_HAVE_RNG   \
             $(CPPFLAGS)          \
             $(FPIC)              \
             $(CFLAGS)

#
# Benchmarks
#

BENCH_OBJECTS = test/bench.o test/hrtime.o test/utils.o

#
# Tests
#

TEST_OBJECTS = test/test.o test/utils.o

#
# CTGrind
#

CTGRIND_OBJECTS = test/ctgrind.o test/utils.o

#
# Cleanup
#

OUTPUT = $(LIB_OBJECTS)     \
         $(BENCH_OBJECTS)   \
         $(TEST_OBJECTS)    \
         $(CTGRIND_OBJECTS) \
         $(STATIC_NAME)     \
         $(SHARED_NAME)     \
         $(BENCH_NAME)      \
         $(TEST_NAME)       \
         $(CTGRIND_NAME)    \
         torsion.wasm       \
         torsion_bench.wasm \
         torsion_test.wasm  \
         torsion.js         \
         torsion_bench.js   \
         torsion_test.js

#
# Rules
#

all: $(STATIC_NAME) libtorsion.pc $(BENCH_NAME) $(TEST_NAME)

#
# Public Headers
#

include/torsion/aead.h: include/torsion/common.h \
                        include/torsion/mac.h    \
                        include/torsion/stream.h
	@touch $@

include/torsion/cipher.h: include/torsion/common.h
	@touch $@

include/torsion/common.h: ;

include/torsion/drbg.h: include/torsion/common.h \
                        include/torsion/cipher.h \
                        include/torsion/hash.h
	@touch $@

include/torsion/dsa.h: include/torsion/common.h
	@touch $@

include/torsion/ecc.h: include/torsion/common.h
	@touch $@

include/torsion/encoding.h: include/torsion/common.h
	@touch $@

include/torsion/hash.h: include/torsion/common.h
	@touch $@

include/torsion/ies.h: include/torsion/common.h
	@touch $@

include/torsion/kdf.h: include/torsion/common.h \
                       include/torsion/hash.h
	@touch $@

include/torsion/mac.h: include/torsion/common.h
	@touch $@

include/torsion/rsa.h: include/torsion/common.h \
                       include/torsion/hash.h
	@touch $@

include/torsion/stream.h: include/torsion/common.h
	@touch $@

include/torsion/util.h: include/torsion/common.h
	@touch $@

#
# Private Headers
#

src/asn1.h: src/mpi.h
	@touch $@

src/bf.h: include/torsion/cipher.h
	@touch $@

src/bio.h: src/internal.h
	@touch $@

src/entropy/entropy.h: ;

src/fields/p192.h: src/fields/p192_32.h src/fields/p192_64.h
	@touch $@

src/fields/p224.h: src/fields/p224_32.h src/fields/p224_64.h
	@touch $@

src/fields/p256.h: src/fields/p256_32.h src/fields/p256_64.h
	@touch $@

src/fields/p384.h: src/fields/p384_32.h src/fields/p384_64.h
	@touch $@

src/fields/p521.h: src/fields/p521_32.h src/fields/p521_64.h
	@touch $@

src/fields/secp256k1.h: src/fields/secp256k1_32.h src/fields/secp256k1_64.h
	@touch $@

src/fields/p25519.h: src/fields/p25519_32.h src/fields/p25519_64.h
	@touch $@

src/fields/p448.h: src/fields/p448_32.h src/fields/p448_64.h
	@touch $@

src/fields/p251.h: src/fields/p251_32.h src/fields/p251_64.h
	@touch $@

src/fields/scalar.h: ;

src/internal.h: ;

src/mpi.h: include/torsion/common.h
	@touch $@

src/subgroups.h: ;

#
# Test Headers
#

test/ecc_internal.h: ;

test/mpi_internal.h: test/data/jacobi_vectors.h    \
                     test/data/kronecker_vectors.h \
                     test/data/mpz_vectors.h       \
                     test/data/prime_vectors.h
	@touch $@

test/utils.h: ;

#
# Library Objects
#

src/aead.o: src/aead.c include/torsion/aead.h   \
                       include/torsion/mac.h    \
                       include/torsion/stream.h \
                       include/torsion/util.h   \
                       src/bio.h                \
                       src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/aead.c

src/asn1.o: src/asn1.c src/asn1.h     \
                       src/internal.h \
                       src/mpi.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/asn1.c

src/cipher.o: src/cipher.c include/torsion/cipher.h \
                           include/torsion/util.h   \
                           src/bf.h                 \
                           src/bio.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/cipher.c

src/ecc.o: src/ecc.c include/torsion/drbg.h \
                     include/torsion/ecc.h  \
                     include/torsion/hash.h \
                     include/torsion/util.h \
                     src/asn1.h             \
                     src/internal.h         \
                     src/mpi.h              \
                     src/fields/scalar.h    \
                     src/fields/p192.h      \
                     src/fields/p224.h      \
                     src/fields/p256.h      \
                     src/fields/p384.h      \
                     src/fields/p521.h      \
                     src/fields/secp256k1.h \
                     src/fields/p25519.h    \
                     src/fields/p448.h      \
                     src/fields/p251.h      \
                     src/subgroups.h        \
                     test/ecc_internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/ecc.c

src/encoding.o: src/encoding.c include/torsion/encoding.h \
                               src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/encoding.c

src/entropy/env.o: src/entropy/env.c include/torsion/hash.h \
                                     src/entropy/entropy.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/entropy/env.c

src/entropy/hrt.o: src/entropy/hrt.c src/entropy/entropy.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/entropy/hrt.c

src/entropy/hw.o: src/entropy/hw.c src/entropy/entropy.h \
                                   src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/entropy/hw.c

src/entropy/sys.o: src/entropy/sys.c src/entropy/entropy.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/entropy/sys.c

src/drbg.o: src/drbg.c include/torsion/cipher.h \
                       include/torsion/drbg.h   \
                       include/torsion/hash.h   \
                       src/bio.h                \
                       src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/drbg.c

src/dsa.o: src/dsa.c include/torsion/drbg.h \
                     include/torsion/dsa.h  \
                     include/torsion/hash.h \
                     include/torsion/util.h \
                     src/asn1.h             \
                     src/internal.h         \
                     src/mpi.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/dsa.c

src/hash.o: src/hash.c include/torsion/hash.h \
                       include/torsion/util.h \
                       src/bio.h              \
                       src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/hash.c

src/ies.o: src/ies.c include/torsion/ies.h    \
                     include/torsion/mac.h    \
                     include/torsion/stream.h \
                     include/torsion/util.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/ies.c

src/internal.o: src/internal.c src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/internal.c

src/kdf.o: src/kdf.c include/torsion/cipher.h \
                     include/torsion/hash.h   \
                     include/torsion/kdf.h    \
                     include/torsion/util.h   \
                     src/bf.h                 \
                     src/bio.h                \
                     src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/kdf.c

src/mac.o: src/mac.c include/torsion/mac.h \
                     src/bio.h             \
                     src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/mac.c

src/mpi.o: src/mpi.c src/internal.h      \
                     src/mpi.h           \
                     test/mpi_internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/mpi.c

src/rand.o: src/rand.c include/torsion/hash.h   \
                       include/torsion/rand.h   \
                       include/torsion/stream.h \
                       include/torsion/util.h   \
                       src/entropy/entropy.h    \
                       src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/rand.c

src/rsa.o: src/rsa.c include/torsion/drbg.h \
                     include/torsion/hash.h \
                     include/torsion/rsa.h  \
                     include/torsion/util.h \
                     src/asn1.h             \
                     src/bio.h              \
                     src/internal.h         \
                     src/mpi.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/rsa.c

src/stream.o: src/stream.c include/torsion/stream.h \
                           include/torsion/util.h   \
                           src/bio.h                \
                           src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/stream.c

src/util.o: src/util.c include/torsion/util.h \
                       src/bio.h              \
                       src/internal.h
	$(CC) -o $@ -c $(LIB_CFLAGS) src/util.c

#
# Test Objects
#

test/bench.o: test/bench.c include/torsion/drbg.h \
                           include/torsion/ecc.h  \
                           include/torsion/hash.h  \
                           include/torsion/rsa.h  \
                           include/torsion/stream.h  \
                           include/torsion/util.h  \
                           test/utils.h
	$(CC) -o $@ -c $(LIB_CFLAGS) test/bench.c

test/ctgrind.o: test/ctgrind.c include/torsion/ecc.h  \
                               include/torsion/util.h \
                               test/utils.h
	$(CC) -o $@ -c $(LIB_CFLAGS) test/ctgrind.c

test/hrtime.o: test/hrtime.c src/entropy/hrt.c
	$(CC) -o $@ -c $(LIB_CFLAGS) test/hrtime.c

test/test.o: test/test.c include/torsion/aead.h          \
                         include/torsion/drbg.h          \
                         include/torsion/dsa.h           \
                         include/torsion/ecc.h           \
                         include/torsion/encoding.h      \
                         include/torsion/hash.h          \
                         include/torsion/ies.h           \
                         include/torsion/kdf.h           \
                         include/torsion/mac.h           \
                         include/torsion/rand.h          \
                         include/torsion/rsa.h           \
                         include/torsion/stream.h        \
                         include/torsion/util.h          \
                         test/utils.h                    \
                         test/data/bip340_vectors.h      \
                         test/data/bipschnorr_vectors.h  \
                         test/data/chacha20_vectors.h    \
                         test/data/chachapoly_vectors.h  \
                         test/data/cipher_aead_vectors.h \
                         test/data/cipher_mode_vectors.h \
                         test/data/cipher_vectors.h      \
                         test/data/ctr_drbg_vectors.h    \
                         test/data/dsa_vectors.h         \
                         test/data/eb2k_vectors.h        \
                         test/data/ecdsa_vectors.h       \
                         test/data/eddsa_vectors.h       \
                         test/data/hash_drbg_vectors.h   \
                         test/data/hash_vectors.h        \
                         test/data/hkdf_vectors.h        \
                         test/data/hmac_drbg_vectors.h   \
                         test/data/hmac_vectors.h        \
                         test/data/pbkdf2_vectors.h      \
                         test/data/poly1305_vectors.h    \
                         test/data/rsa_vectors.h
	$(CC) -o $@ -c $(LIB_CFLAGS) test/test.c

test/utils.o: test/utils.c test/utils.h
	$(CC) -o $@ -c $(LIB_CFLAGS) test/utils.c

#
# Native
#

CONFIG = -e 's;@prefix@;$(PREFIX);g'               \
         -e 's;@exec_prefix@;$${prefix};g'         \
         -e 's;@libdir@;$${exec_prefix}/lib;g'     \
         -e 's;@includedir@;$${prefix}/include;g'  \
         -e 's;@PACKAGE_NAME@;libtorsion;g'        \
         -e 's;@PACKAGE_VERSION@;$(PKG_VERSION);g' \
         -e 's;@LIBS_PRIVATE@;$(LIBS);g'

INSTDIR = $(DESTDIR)$(PREFIX)

$(STATIC_NAME): $(LIB_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(LIB_OBJECTS)
	@test x'$(RANLIB)' != x && $(RANLIB) $@ || true

$(SHARED_NAME): $(LIB_OBJECTS)
	$(CC) -o $@ $(SHARED) $(FPIC) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)

$(BENCH_NAME): $(BENCH_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(BENCH_OBJECTS) $(STATIC_NAME) $(LIBS)

$(TEST_NAME): $(TEST_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(TEST_OBJECTS) $(STATIC_NAME) $(LIBS)

$(CTGRIND_NAME): $(CTGRIND_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(CTGRIND_OBJECTS) $(STATIC_NAME) $(LIBS)

libtorsion.pc: libtorsion.pc.in
	sed $(CONFIG) < $@.in > $@

bench: $(BENCH_NAME)
	@./$(BENCH_NAME)

check test: $(TEST_NAME)
	@./$(TEST_NAME)

ctgrind: $(CTGRIND_NAME)
	@valgrind --leak-check=full --error-exitcode=1 ./$(CTGRIND_NAME)

valgrind: $(TEST_NAME)
	@valgrind --leak-check=full --error-exitcode=1 ./$(TEST_NAME)

clean:
	rm -f $(OUTPUT)

install: $(STATIC_NAME) $(SHARED_NAME) libtorsion.pc
	mkdir -p $(INSTDIR)/lib/pkgconfig
	mkdir -p $(INSTDIR)/include/torsion
	mkdir -p $(INSTDIR)/share/doc/libtorsion
	mkdir -p $(INSTDIR)/share/licenses/libtorsion
	cp -f $(SHARED_NAME) $(INSTDIR)/lib/
	cp -f $(STATIC_NAME) $(INSTDIR)/lib/
	cp -f libtorsion.pc $(INSTDIR)/lib/pkgconfig/
	rm -f $(INSTDIR)/include/torsion/*.h
	cp -f include/torsion/*.h $(INSTDIR)/include/torsion/
	cp -f LICENSE $(INSTDIR)/share/licenses/libtorsion/
	cp -f README.md $(INSTDIR)/share/doc/libtorsion/

#
# WASI
#

WASI_LDFLAGS = -Wl,--allow-undefined                  \
               -Wl,--initial-memory=$(INITIAL_MEMORY) \
               -Wl,--max-memory=$(MAX_MEMORY)         \
               -Wl,-z,stack-size=$(STACK_SIZE)        \
               -Wl,--stack-first

# Note: We have to manually choose crt1-reactor.o
# until reactor support is widely available via:
#
#   -mexec-model=reactor
#
# See: https://github.com/llvm/llvm-project/commit/d496437
#      https://reviews.llvm.org/D62922
WASI_CRT = $(WASI)/share/wasi-sysroot/lib/wasm32-wasi/crt1-reactor.o

WASI_LIBFLAGS = $(WASI_LDFLAGS)         \
                -nostartfiles           \
                -Wl,--entry=_initialize \
                -Wl,--export-dynamic    \
                -Wl,--export=malloc     \
                -Wl,--export=free

torsion.wasm: $(LIB_OBJECTS) $(WASI_CRT)
	$(CC) -o $@ $(WASI_LIBFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(WASI_CRT) $(LIBS)
	@chmod 0644 $@

torsion_bench.wasm: $(BENCH_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(WASI_LDFLAGS) $(LDFLAGS) $(BENCH_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_test.wasm: $(TEST_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(WASI_LDFLAGS) $(LDFLAGS) $(TEST_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

bench_wasm: torsion_bench.wasm
	@./scripts/wasi-run torsion_bench.wasm

check_wasm test_wasm: torsion_test.wasm
	@./scripts/wasi-run torsion_test.wasm

#
# Emscripten
#

EM_LDFLAGS = -s SINGLE_FILE=1                    \
             -s ASSERTIONS=0                     \
             -s NODEJS_CATCH_EXIT=0              \
             -s NODEJS_CATCH_REJECTION=0         \
             -s ALLOW_MEMORY_GROWTH=1            \
             -s INITIAL_MEMORY=$(INITIAL_MEMORY) \
             -s MAXIMUM_MEMORY=$(MAX_MEMORY)     \
             -s TOTAL_STACK=$(STACK_SIZE)        \
             -s ENVIRONMENT=$(ENVIRONMENT)

EM_LIBFLAGS = $(EM_LDFLAGS) -s EXPORTED_FUNCTIONS=@etc/exports.json

torsion.js: $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LIBFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_bench.js: $(BENCH_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LDFLAGS) $(LDFLAGS) $(BENCH_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_test.js: $(TEST_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LDFLAGS) $(LDFLAGS) $(TEST_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

bench_js: torsion_bench.js
	@node torsion_bench.js

check_js test_js: torsion_test.js
	@node torsion_test.js
