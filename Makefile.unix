# Makefile.unix - unix makefile for libtorsion
# Copyright (c) 2020, Christopher Jeffrey (MIT License).
# https://github.com/bcoin-org/libtorsion

# Examples:
#
#  Static:
#
#    $ make -f Makefile.unix
#
#  Shared (Linux):
#
#    $ make -f Makefile.unix FPIC=-fPIC libtorsion.so
#
#  Shared (Darwin):
#
#    $ make -f Makefile.unix SHARED_SUFFIX=.dylib FPIC=-fPIC libtorsion.dylib
#
#  Shared (AIX+XL):
#
#    $ make -f Makefile.unix FPIC=-qpic SHARED=-qmkshrobj libtorsion.so

PKG_VERSION = 0.0.0

#
# Options
#

LIB_PREFIX = lib
STATIC_SUFFIX = .a
SHARED_SUFFIX = .so
EXE_SUFFIX =
FPIC =
SHARED = -shared

DESTDIR =
PREFIX = /usr/local

INITIAL_MEMORY = 16777216
MAX_MEMORY = 2147483648
STACK_SIZE = 5242880
ENVIRONMENT = node

#
# Binary Names
#

STATIC_NAME = $(LIB_PREFIX)torsion$(STATIC_SUFFIX)
SHARED_NAME = $(LIB_PREFIX)torsion$(SHARED_SUFFIX)
BENCH_NAME = torsion_bench$(EXE_SUFFIX)
TEST_NAME = torsion_test$(EXE_SUFFIX)
CTGRIND_NAME = torsion_ctgrind$(EXE_SUFFIX)

#
# Library
#

LIB_OBJECTS = aead.o     \
              asn1.o     \
              cipher.o   \
              ecc.o      \
              encoding.o \
              env.o      \
              hrt.o      \
              hw.o       \
              sys.o      \
              drbg.o     \
              dsa.o      \
              hash.o     \
              ies.o      \
              internal.o \
              kdf.o      \
              mac.o      \
              mpi.o      \
              rand.o     \
              rsa.o      \
              stream.o   \
              util.o

LIB_CFLAGS = -I./include        \
             -DTORSION_BUILD    \
             -DTORSION_HAVE_RNG \
             $(CPPFLAGS)        \
             $(FPIC)            \
             $(CFLAGS)

#
# Benchmarks
#

BENCH_OBJECTS = bench.o hrtime.o utils.o

#
# Tests
#

TEST_OBJECTS = test.o utils.o

#
# CTGrind
#

CTGRIND_OBJECTS = ctgrind.o utils.o

#
# Cleanup
#

OUTPUT = $(LIB_OBJECTS)     \
         $(BENCH_OBJECTS)   \
         $(TEST_OBJECTS)    \
         $(CTGRIND_OBJECTS) \
         $(STATIC_NAME)     \
         $(SHARED_NAME)     \
         $(BENCH_NAME)      \
         $(TEST_NAME)       \
         $(CTGRIND_NAME)    \
         libtorsion.def     \
         libtorsion.dll     \
         libtorsion.dll.a   \
         torsion_bench.exe  \
         torsion_test.exe   \
         torsion.wasm       \
         torsion_bench.wasm \
         torsion_test.wasm  \
         torsion.js         \
         torsion_bench.js   \
         torsion_test.js

#
# Rules
#

all: native

#
# Library Objects
#

aead.o: src/aead.c include/torsion/aead.h   \
                   include/torsion/common.h \
                   include/torsion/mac.h    \
                   include/torsion/stream.h \
                   include/torsion/util.h   \
                   src/bio.h                \
                   src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/aead.c

asn1.o: src/asn1.c include/torsion/common.h \
                   src/asn1.h               \
                   src/internal.h           \
                   src/mpi.h
	$(CC) -c $(LIB_CFLAGS) src/asn1.c

cipher.o: src/cipher.c include/torsion/cipher.h \
                       include/torsion/common.h \
                       include/torsion/util.h   \
                       src/bf.h                 \
                       src/bio.h                \
                       src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/cipher.c

ecc.o: src/ecc.c include/torsion/cipher.h  \
                 include/torsion/common.h  \
                 include/torsion/drbg.h    \
                 include/torsion/ecc.h     \
                 include/torsion/hash.h    \
                 include/torsion/util.h    \
                 src/asn1.h                \
                 src/fields/p192_64.h      \
                 src/fields/p192.h         \
                 src/fields/p224_64.h      \
                 src/fields/p224.h         \
                 src/fields/p251_64.h      \
                 src/fields/p251.h         \
                 src/fields/p25519_64.h    \
                 src/fields/p25519.h       \
                 src/fields/p256_64.h      \
                 src/fields/p256.h         \
                 src/fields/p384_64.h      \
                 src/fields/p384.h         \
                 src/fields/p448_64.h      \
                 src/fields/p448.h         \
                 src/fields/p521_64.h      \
                 src/fields/p521.h         \
                 src/fields/scalar.h       \
                 src/fields/secp256k1_64.h \
                 src/fields/secp256k1.h    \
                 src/internal.h            \
                 src/mpi.h                 \
                 src/subgroups.h
	$(CC) -c $(LIB_CFLAGS) src/ecc.c

encoding.o: src/encoding.c include/torsion/common.h   \
                           include/torsion/encoding.h \
                           src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/encoding.c

env.o: src/entropy/env.c include/torsion/common.h \
                         include/torsion/hash.h   \
                         src/entropy/entropy.h
	$(CC) -c $(LIB_CFLAGS) src/entropy/env.c

hrt.o: src/entropy/hrt.c src/entropy/entropy.h
	$(CC) -c $(LIB_CFLAGS) src/entropy/hrt.c

hw.o: src/entropy/hw.c src/entropy/entropy.h \
                       src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/entropy/hw.c

sys.o: src/entropy/sys.c src/entropy/entropy.h
	$(CC) -c $(LIB_CFLAGS) src/entropy/sys.c

drbg.o: src/drbg.c include/torsion/cipher.h \
                   include/torsion/common.h \
                   include/torsion/drbg.h   \
                   include/torsion/hash.h   \
                   src/bio.h                \
                   src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/drbg.c

dsa.o: src/dsa.c include/torsion/cipher.h \
                 include/torsion/common.h \
                 include/torsion/drbg.h   \
                 include/torsion/dsa.h    \
                 include/torsion/hash.h   \
                 include/torsion/util.h   \
                 src/asn1.h               \
                 src/internal.h           \
                 src/mpi.h
	$(CC) -c $(LIB_CFLAGS) src/dsa.c

hash.o: src/hash.c include/torsion/common.h \
                   include/torsion/hash.h   \
                   include/torsion/util.h   \
                   src/bio.h                \
                   src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/hash.c

ies.o: src/ies.c include/torsion/common.h \
                 include/torsion/ies.h    \
                 include/torsion/mac.h    \
                 include/torsion/stream.h \
                 include/torsion/util.h
	$(CC) -c $(LIB_CFLAGS) src/ies.c

internal.o: src/internal.c src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/internal.c

kdf.o: src/kdf.c include/torsion/cipher.h \
                 include/torsion/common.h \
                 include/torsion/hash.h   \
                 include/torsion/kdf.h    \
                 include/torsion/util.h   \
                 src/bf.h                 \
                 src/bio.h                \
                 src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/kdf.c

mac.o: src/mac.c include/torsion/common.h \
                 include/torsion/mac.h    \
                 src/bio.h                \
                 src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/mac.c

mpi.o: src/mpi.c include/torsion/common.h \
                 src/internal.h           \
                 src/mpi.h
	$(CC) -c $(LIB_CFLAGS) src/mpi.c

rand.o: src/rand.c include/torsion/common.h \
                   include/torsion/hash.h   \
                   include/torsion/rand.h   \
                   include/torsion/stream.h \
                   include/torsion/util.h   \
                   src/entropy/entropy.h    \
                   src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/rand.c

rsa.o: src/rsa.c include/torsion/cipher.h \
                 include/torsion/common.h \
                 include/torsion/drbg.h   \
                 include/torsion/hash.h   \
                 include/torsion/rsa.h    \
                 include/torsion/util.h   \
                 src/asn1.h               \
                 src/bio.h                \
                 src/internal.h           \
                 src/mpi.h
	$(CC) -c $(LIB_CFLAGS) src/rsa.c

stream.o: src/stream.c include/torsion/common.h \
                       include/torsion/stream.h \
                       include/torsion/util.h   \
                       src/bio.h                \
                       src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/stream.c

util.o: src/util.c include/torsion/common.h \
                   include/torsion/util.h   \
                   src/bio.h                \
                   src/internal.h
	$(CC) -c $(LIB_CFLAGS) src/util.c

#
# Test Objects
#

bench.o: test/bench.c include/torsion/cipher.h \
                      include/torsion/common.h \
                      include/torsion/drbg.h   \
                      include/torsion/ecc.h    \
                      include/torsion/hash.h   \
                      include/torsion/rsa.h    \
                      include/torsion/stream.h \
                      include/torsion/util.h   \
                      test/utils.h
	$(CC) -c $(LIB_CFLAGS) test/bench.c

ctgrind.o: test/ctgrind.c include/torsion/common.h \
                          include/torsion/ecc.h    \
                          include/torsion/util.h   \
                          test/utils.h
	$(CC) -c $(LIB_CFLAGS) test/ctgrind.c

hrtime.o: test/hrtime.c src/entropy/entropy.h \
                        src/entropy/hrt.c
	$(CC) -c $(LIB_CFLAGS) test/hrtime.c

test.o: test/test.c include/torsion/aead.h          \
                    include/torsion/cipher.h        \
                    include/torsion/common.h        \
                    include/torsion/drbg.h          \
                    include/torsion/dsa.h           \
                    include/torsion/ecc.h           \
                    include/torsion/encoding.h      \
                    include/torsion/hash.h          \
                    include/torsion/ies.h           \
                    include/torsion/kdf.h           \
                    include/torsion/mac.h           \
                    include/torsion/rand.h          \
                    include/torsion/rsa.h           \
                    include/torsion/stream.h        \
                    include/torsion/util.h          \
                    test/data/bip340_vectors.h      \
                    test/data/bipschnorr_vectors.h  \
                    test/data/chacha20_vectors.h    \
                    test/data/chachapoly_vectors.h  \
                    test/data/cipher_aead_vectors.h \
                    test/data/cipher_mode_vectors.h \
                    test/data/cipher_vectors.h      \
                    test/data/ctr_drbg_vectors.h    \
                    test/data/dsa_vectors.h         \
                    test/data/eb2k_vectors.h        \
                    test/data/ecdsa_vectors.h       \
                    test/data/eddsa_vectors.h       \
                    test/data/hash_drbg_vectors.h   \
                    test/data/hash_vectors.h        \
                    test/data/hkdf_vectors.h        \
                    test/data/hmac_drbg_vectors.h   \
                    test/data/hmac_vectors.h        \
                    test/data/pbkdf2_vectors.h      \
                    test/data/poly1305_vectors.h    \
                    test/data/rsa_vectors.h         \
                    test/utils.h
	$(CC) -c $(LIB_CFLAGS) test/test.c

utils.o: test/utils.c test/utils.h
	$(CC) -c $(LIB_CFLAGS) test/utils.c

#
# Native
#

CONFIG = -e 's;@CMAKE_INSTALL_PREFIX@;$(PREFIX);g'   \
         -e 's;@CMAKE_INSTALL_LIBDIR@;lib;g'         \
         -e 's;@CMAKE_INSTALL_INCLUDEDIR@;include;g' \
         -e 's;@PROJECT_NAME@;libtorsion;g'          \
         -e 's;@PROJECT_VERSION@;$(PKG_VERSION);g'   \
         -e 's;@pkgconf_libs@;$(LIBS);g'

INSTDIR = $(DESTDIR)$(PREFIX)

native: $(STATIC_NAME) libtorsion.pc $(BENCH_NAME) $(TEST_NAME)

$(STATIC_NAME): $(LIB_OBJECTS)
	$(AR) $(ARFLAGS) $@ $(LIB_OBJECTS)
	@x='$(RANLIB)'; $${x:-ranlib} $@ 2> /dev/null || true

$(SHARED_NAME): $(LIB_OBJECTS)
	$(CC) -o $@ $(SHARED) $(FPIC) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)

$(BENCH_NAME): $(BENCH_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(BENCH_OBJECTS) $(STATIC_NAME) $(LIBS)

$(TEST_NAME): $(TEST_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(TEST_OBJECTS) $(STATIC_NAME) $(LIBS)

$(CTGRIND_NAME): $(CTGRIND_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(LDFLAGS) $(CTGRIND_OBJECTS) $(STATIC_NAME) $(LIBS)

libtorsion.pc: libtorsion.pc.in
	@echo 'sed < $@.in > $@'
	@sed $(CONFIG) < $@.in > $@

bench: $(BENCH_NAME)
	@./$(BENCH_NAME)

check: $(TEST_NAME)
	@./$(TEST_NAME)

test: check

ctgrind: $(CTGRIND_NAME)
	@valgrind --leak-check=full --error-exitcode=1 ./$(CTGRIND_NAME)

valgrind: $(TEST_NAME)
	@valgrind --leak-check=full --error-exitcode=1 ./$(TEST_NAME)

clean:
	rm -f $(OUTPUT)

install: $(STATIC_NAME) $(SHARED_NAME) libtorsion.pc
	mkdir -p $(INSTDIR)/lib/pkgconfig
	mkdir -p $(INSTDIR)/include/torsion
	mkdir -p $(INSTDIR)/share/doc/libtorsion
	mkdir -p $(INSTDIR)/share/licenses/libtorsion
	cp -f $(SHARED_NAME) $(INSTDIR)/lib/
	cp -f $(STATIC_NAME) $(INSTDIR)/lib/
	cp -f libtorsion.pc $(INSTDIR)/lib/pkgconfig/
	rm -f $(INSTDIR)/include/torsion/*.h
	cp -f include/torsion/*.h $(INSTDIR)/include/torsion/
	cp -f LICENSE $(INSTDIR)/share/licenses/libtorsion/
	cp -f README.md $(INSTDIR)/share/doc/libtorsion/

#
# MinGW
#

MINGW_LDFLAGS = -static-libgcc $(LDFLAGS)
MINGW_LIBS = -lkernel32 -luser32 -ladvapi32 -liphlpapi -lpsapi -lbcrypt $(LIBS)
MINGW_SHARED = -shared -Wl,--out-implib,$@.a -Wl,--output-def,libtorsion.def

mingw: $(STATIC_NAME) libtorsion.dll torsion_bench.exe torsion_test.exe

libtorsion.dll: $(LIB_OBJECTS)
	$(CC) -o $@ $(MINGW_SHARED) $(MINGW_LDFLAGS) $(LIB_OBJECTS) $(MINGW_LIBS)

torsion_bench.exe: $(BENCH_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(MINGW_LDFLAGS) $(BENCH_OBJECTS) $(STATIC_NAME) $(MINGW_LIBS)

torsion_test.exe: $(TEST_OBJECTS) $(STATIC_NAME)
	$(CC) -o $@ $(MINGW_LDFLAGS) $(TEST_OBJECTS) $(STATIC_NAME) $(MINGW_LIBS)

bench_mingw: torsion_bench.exe
	@wine ./torsion_bench.exe

test_mingw: torsion_test.exe
	@wine ./torsion_test.exe

#
# WASI
#

WASI_LDFLAGS = -Wl,--allow-undefined                  \
               -Wl,--initial-memory=$(INITIAL_MEMORY) \
               -Wl,--max-memory=$(MAX_MEMORY)         \
               -Wl,-z,stack-size=$(STACK_SIZE)        \
               -Wl,--stack-first

WASI_LIBFLAGS = $(WASI_LDFLAGS)      \
                -mexec-model=reactor \
                -Wl,--export-dynamic \
                -Wl,--export=malloc  \
                -Wl,--export=free

wasm: torsion.wasm torsion_bench.wasm torsion_test.wasm

torsion.wasm: $(LIB_OBJECTS)
	$(CC) -o $@ $(WASI_LIBFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_bench.wasm: $(BENCH_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(WASI_LDFLAGS) $(LDFLAGS) $(BENCH_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_test.wasm: $(TEST_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(WASI_LDFLAGS) $(LDFLAGS) $(TEST_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

bench_wasm: torsion_bench.wasm
	@./scripts/wasi-run torsion_bench.wasm

test_wasm: torsion_test.wasm
	@./scripts/wasi-run torsion_test.wasm

#
# Emscripten
#

EM_LDFLAGS = -s SINGLE_FILE=1                    \
             -s ASSERTIONS=0                     \
             -s NODEJS_CATCH_EXIT=0              \
             -s NODEJS_CATCH_REJECTION=0         \
             -s ALLOW_MEMORY_GROWTH=1            \
             -s INITIAL_MEMORY=$(INITIAL_MEMORY) \
             -s MAXIMUM_MEMORY=$(MAX_MEMORY)     \
             -s TOTAL_STACK=$(STACK_SIZE)        \
             -s ENVIRONMENT=$(ENVIRONMENT)

EM_LIBFLAGS = $(EM_LDFLAGS) -s EXPORTED_FUNCTIONS=@etc/exports.json

js: torsion.js torsion_bench.js torsion_test.js

torsion.js: $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LIBFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_bench.js: $(BENCH_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LDFLAGS) $(LDFLAGS) $(BENCH_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

torsion_test.js: $(TEST_OBJECTS) $(LIB_OBJECTS)
	$(CC) -o $@ $(EM_LDFLAGS) $(LDFLAGS) $(TEST_OBJECTS) $(LIB_OBJECTS) $(LIBS)
	@chmod 0644 $@

bench_js: torsion_bench.js
	@node torsion_bench.js

test_js: torsion_test.js
	@node torsion_test.js
