PREFIX ?= /usr/local
PTHREAD_CFLAGS ?=
PTHREAD_LIBS ?= -lpthread
ENABLE_COVERAGE ?= 0
ENABLE_DEBUG ?= 0
ENABLE_RNG ?= 1
SO = so

ifeq ($(shell uname -s), Darwin)
SO = dylib
endif

COMMON_CFLAGS = -std=c89                         \
                -pedantic                        \
                -Wall                            \
                -Wextra                          \
                -Wcast-align                     \
                -Wno-declaration-after-statement \
                -Wno-implicit-fallthrough        \
                -Wno-long-long                   \
                -Wno-overlength-strings          \
                -Wshadow                         \
                -I./include                      \
                -O3

LIB_SOURCES = src/aead.c      \
              src/asn1.c      \
              src/cipher.c    \
              src/ecc.c       \
              src/encoding.c  \
              src/drbg.c      \
              src/dsa.c       \
              src/hash.c      \
              src/ies.c       \
              src/internal.c  \
              src/kdf.c       \
              src/mac.c       \
              src/mpi.c       \
              src/rsa.c       \
              src/stream.c    \
              src/util.c

ifeq ($(ENABLE_RNG), 1)
LIB_SOURCES += src/entropy/env.c \
               src/entropy/hw.c  \
               src/entropy/sys.c \
               src/rand.c
endif

LIB_OBJECTS := $(subst .c,.o,$(LIB_SOURCES))
LIB_CFLAGS := $(COMMON_CFLAGS) -DTORSION_BUILD $(CFLAGS)
LIB_LDFLAGS =

BENCH_SOURCES = test/bench.c test/hrtime.c
BENCH_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
BENCH_LIBS = -L. -ltorsion

TEST_SOURCES = test/test.c
TEST_CFLAGS := $(COMMON_CFLAGS) -DTORSION_HAVE_FORK $(CFLAGS)
TEST_LIBS = -L. -ltorsion

CTIME_SOURCES = test/ctime.c
CTIME_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
CTIME_LIBS = -L. -ltorsion

OUTPUT := libtorsion.$(SO) libtorsion.a torsion_bench

ifeq ($(ENABLE_COVERAGE), 1)
LIB_CFLAGS += -DTORSION_COVERAGE
LIB_CFLAGS += --coverage
LIB_LDFLAGS += --coverage
OUTPUT += torsion_test
endif

ifeq ($(ENABLE_DEBUG), 1)
LIB_CFLAGS += -g
LIB_CFLAGS += -DTORSION_DEBUG
BENCH_CFLAGS += -g
TEST_CFLAGS += -g
OUTPUT += torsion_test torsion_test_a
endif

ifeq ($(ENABLE_RNG), 1)
BENCH_CFLAGS += -DTORSION_HAVE_RNG
TEST_SOURCES += test/thread.c
TEST_CFLAGS += -DTORSION_HAVE_RNG
TEST_CFLAGS += -DTORSION_HAVE_THREADS
TEST_CFLAGS += $(PTHREAD_CFLAGS)
TEST_LIBS += $(PTHREAD_LIBS)
endif

all: $(OUTPUT)

%.o: %.c
	$(CC) -o $@ -c -fPIC $(LIB_CFLAGS) $<

libtorsion.$(SO): $(LIB_OBJECTS)
	$(CC) -o $@ -shared -fPIC $(LIB_LDFLAGS) $^

libtorsion.a: $(LIB_OBJECTS)
	$(AR) rcs $@ $^

torsion_bench: libtorsion.a $(TEST_SOURCES)
	$(CC) -o $@ -static $(BENCH_CFLAGS) $(BENCH_SOURCES) $(BENCH_LIBS)

torsion_test: libtorsion.$(SO) $(TEST_SOURCES)
	$(CC) -o $@ $(TEST_CFLAGS) $(TEST_SOURCES) $(TEST_LIBS)

torsion_test_a: libtorsion.a $(TEST_SOURCES)
	$(CC) -o $@ -static $(TEST_CFLAGS) $(TEST_SOURCES) $(TEST_LIBS)

torsion_ctime: libtorsion.$(SO) $(CTIME_SOURCES)
	$(CC) -o $@ $(CTIME_CFLAGS) $(CTIME_SOURCES) $(CTIME_LIBS)

install: $(OUTPUT)
	install -d $(DESTDIR)$(PREFIX)/lib
	install -d $(DESTDIR)$(PREFIX)/include/torsion
	install -d $(DESTDIR)$(PREFIX)/share/licenses
	install -m 755 libtorsion.$(SO) $(DESTDIR)$(PREFIX)/lib/
	install -m 644 libtorsion.a $(DESTDIR)$(PREFIX)/lib/
	install -m 644 include/torsion/*.h $(DESTDIR)$(PREFIX)/include/torsion/
	install -m 644 LICENSE $(DESTDIR)$(PREFIX)/share/licenses/

bench: torsion_bench
	@./torsion_bench

test: torsion_test
	@LD_LIBRARY_PATH=. ./torsion_test

test_a: torsion_test_a
	@./torsion_test_a

ctime: torsion_ctime
	@LD_LIBRARY_PATH=. valgrind ./torsion_ctime

clean:
	rm -f $(LIB_OBJECTS) $(OUTPUT) torsion_test torsion_test_a torsion_ctime

.PHONY: all install bench test test_a ctime clean
