# Makefile.wasi - wasi makefile for libtorsion
# Copyright (c) 2020, Christopher Jeffrey (MIT License).
# https://github.com/bcoin-org/libtorsion

WASI ?= /opt/wasi-sdk
CC := $(WASI)/bin/clang
SYSROOT := $(WASI)/share/wasi-sysroot
TARGET = wasm32-wasi
INITIAL_MEMORY ?= 16777216
MAX_MEMORY ?= 2147483648
STACK_SIZE ?= 5242880
ENABLE_DEBUG ?= 0
ENABLE_RNG ?= 1

#
# CFLAGS
#

COMMON_CFLAGS := --target=$(TARGET)        \
                 --sysroot=$(SYSROOT)      \
                 -std=c89                  \
                 -pedantic                 \
                 -Wall                     \
                 -Wextra                   \
                 -Wcast-align              \
                 -Wno-implicit-fallthrough \
                 -Wno-long-long            \
                 -Wno-overlength-strings   \
                 -Wshadow                  \
                 -I./include               \
                 -O3

ifeq ($(ENABLE_DEBUG), 1)
COMMON_CFLAGS += -g
endif

#
# LDFLAGS
#

COMMON_LDFLAGS := -Wl,--allow-undefined                  \
                  -Wl,--initial-memory=$(INITIAL_MEMORY) \
                  -Wl,--max-memory=$(MAX_MEMORY)         \
                  -Wl,-z -Wl,stack-size=$(STACK_SIZE)    \
                  -Wl,--stack-first                      \
                  -Wl,--no-threads

#
# Sources/Objects
#

COMMON_SOURCES = src/aead.c     \
                 src/asn1.c     \
                 src/cipher.c   \
                 src/ecc.c      \
                 src/encoding.c \
                 src/drbg.c     \
                 src/dsa.c      \
                 src/hash.c     \
                 src/ies.c      \
                 src/internal.c \
                 src/kdf.c      \
                 src/mac.c      \
                 src/mpi.c      \
                 src/rsa.c      \
                 src/stream.c   \
                 src/util.c

RNG_SOURCES = src/entropy/env.c \
              src/entropy/hw.c  \
              src/entropy/sys.c \
              src/rand.c

ifeq ($(ENABLE_RNG), 1)
COMMON_SOURCES += $(RNG_SOURCES)
endif

COMMON_OBJECTS := $(subst .c,.o,$(COMMON_SOURCES))

#
# Library
#

# Note: We have to manually choose crt1-reactor.o
# until reactor support is widely available via:
#
#   -mexec-model=reactor
#
# See: https://github.com/llvm/llvm-project/commit/d496437
#      https://reviews.llvm.org/D62922
LIB_SOURCES := $(COMMON_OBJECTS) $(SYSROOT)/lib/$(TARGET)/crt1-reactor.o
LIB_CFLAGS := $(COMMON_CFLAGS) -DTORSION_BUILD $(CFLAGS)
LIB_LDFLAGS := $(COMMON_LDFLAGS)       \
               -nostartfiles           \
               -Wl,--entry=_initialize \
               -Wl,--export-dynamic    \
               -Wl,--export=malloc     \
               -Wl,--export=free       \
               $(LDFLAGS)

ifeq ($(ENABLE_DEBUG), 1)
LIB_CFLAGS += -DTORSION_DEBUG
endif

#
# Benchmarks
#

BENCH_SOURCES := $(COMMON_OBJECTS) test/bench.c test/hrtime.c
BENCH_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
BENCH_LDFLAGS := $(COMMON_LDFLAGS) $(LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
BENCH_CFLAGS += -DTORSION_HAVE_RNG
endif

#
# Tests
#

TEST_SOURCES := $(COMMON_OBJECTS) test/test.c
TEST_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
TEST_LDFLAGS := $(COMMON_LDFLAGS) $(LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
TEST_CFLAGS += -DTORSION_HAVE_RNG
endif

#
# Rules
#

OUTPUT = torsion.wasm torsion_bench.wasm torsion_test.wasm

HEADERS := $(shell find . -name '*.h')

all: $(OUTPUT)

%.o: %.c $(HEADERS)
	$(CC) -o $@ -c $(LIB_CFLAGS) $<

torsion.wasm: $(LIB_SOURCES)
	$(CC) -o $@ $(LIB_CFLAGS) $(LIB_LDFLAGS) $^

torsion_bench.wasm: $(BENCH_SOURCES)
	$(CC) -o $@ $(BENCH_CFLAGS) $(BENCH_LDFLAGS) $^

torsion_test.wasm: $(TEST_SOURCES)
	$(CC) -o $@ $(TEST_CFLAGS) $(TEST_LDFLAGS) $^

bench: torsion_bench.wasm
	@./scripts/wasi-run $^

test: torsion_test.wasm
	@./scripts/wasi-run $^

check: test

clean:
	$(RM) $(COMMON_OBJECTS) $(OUTPUT)

.PHONY: all bench test check clean
