SDK ?= /opt/wasi-sdk
CC := $(SDK)/bin/clang
SYSROOT := $(SDK)/share/wasi-sysroot
TARGET = wasm32-wasi
INITIAL_MEMORY ?= 16777216
MAX_MEMORY ?= 2147483648
STACK_SIZE ?= 5242880
ENABLE_RNG ?= 1
ENABLE_TEST ?= 0

COMMON_CFLAGS := --target=$(TARGET)        \
                 --sysroot=$(SYSROOT)      \
                 -flto                     \
                 -std=gnu11                \
                 -Wall                     \
                 -Wextra                   \
                 -Wcast-align              \
                 -Wno-implicit-fallthrough \
                 -Wshadow                  \
                 -I./include               \
                 -O3

COMMON_LDFLAGS := -Wl,--allow-undefined                  \
                  -Wl,--strip-debug                      \
                  -Wl,--gc-sections                      \
                  -Wl,--initial-memory=$(INITIAL_MEMORY) \
                  -Wl,--max-memory=$(MAX_MEMORY)         \
                  -Wl,-z -Wl,stack-size=$(STACK_SIZE)    \
                  -Wl,--lto-O3                           \
                  -Wl,-O3

COMMON_SOURCES = src/aead.c      \
                 src/asn1.c      \
                 src/chacha20.c  \
                 src/cipher.c    \
                 src/ecc.c       \
                 src/encoding.c  \
                 src/drbg.c      \
                 src/dsa.c       \
                 src/hash.c      \
                 src/internal.c  \
                 src/kdf.c       \
                 src/mpi.c       \
                 src/poly1305.c  \
                 src/rsa.c       \
                 src/salsa20.c   \
                 src/secretbox.c \
                 src/siphash.c   \
                 src/util.c

ifeq ($(ENABLE_RNG), 1)
COMMON_SOURCES += src/entropy/env.c \
                  src/entropy/hw.c  \
                  src/entropy/sys.c \
                  src/rand.c
endif

# Note: We have to add an empty main function
# and link our _initialize function manually
# until reactor support is widely available
# via:
#
#   -mexec-model=reactor
#
# See: https://github.com/llvm/llvm-project/commit/d496437
#      https://reviews.llvm.org/D62922

LIB_SOURCES := $(COMMON_SOURCES) etc/crt1-reactor.c etc/main.c
LIB_CFLAGS := $(COMMON_CFLAGS) -DTORSION_BUILD $(CFLAGS)
LIB_LDFLAGS := $(COMMON_LDFLAGS) -Wl,--export-all

TEST_SOURCES := $(COMMON_SOURCES) test/os.c test/test.c
TEST_CFLAGS := $(COMMON_CFLAGS) $(CFLAGS)
TEST_LDFLAGS := $(COMMON_LDFLAGS)

ifeq ($(ENABLE_RNG), 1)
TEST_CFLAGS += -DTORSION_HAVE_RNG
endif

ifeq ($(ENABLE_TEST), 1)
LIB_CFLAGS += -DTORSION_TEST
TEST_CFLAGS += -DTORSION_TEST
else
LIB_CFLAGS += -DTORSION_NO_ASSERT
endif

OUTPUT = torsion.wasm tests.wasm

all: $(OUTPUT)

torsion.wasm: $(LIB_SOURCES)
	$(CC) -o $@ $(LIB_CFLAGS) $(LIB_LDFLAGS) $^

tests.wasm: $(TEST_SOURCES)
	$(CC) -o $@ $(TEST_CFLAGS) $(TEST_LDFLAGS) $^

test: tests.wasm
	@./scripts/run-wasi.sh $^

clean:
	rm -f $(OUTPUT)

.PHONY: all test clean
