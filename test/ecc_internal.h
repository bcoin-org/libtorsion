/*!
 * ecc-internal.h - ecc internal tests for libtorsion
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/libtorsion
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <limits.h>

#undef ASSERT
#define ASSERT(expr) ASSERT_ALWAYS(expr)

/*
 * Debug Helpers
 */

static size_t
mpn_out_str(FILE *stream, int base, const mp_limb_t *xp, int xn) {
  mp_limb_t ch;
  int bytes = 0;
  int i;

  ASSERT(base == 16);

  if (xn < 0) {
    fputc('-', stream);
    xn = -xn;
  }

  xn = mpn_strip(xp, xn);

  if (xn == 0) {
    fputc('0', stream);
    return 1;
  }

  while (xn--) {
    i = MP_LIMB_BITS / 4;

    while (i--) {
      ch = (xp[xn] >> (i * 4)) & 0x0f;

      if (bytes == 0 && ch == 0)
        continue;

      if (ch < 0x0a)
        ch += '0';
      else
        ch += 'a' - 0x0a;

      fputc(ch, stream);

      bytes += 1;
    }
  }

  return bytes;
}

TORSION_UNUSED static size_t
mpz_out_str(FILE *stream, int base, const mpz_t x) {
  return mpn_out_str(stream, base, x->limbs, x->size);
}

TORSION_UNUSED static void
sc_print(const scalar_field_t *sc, const sc_t a) {
  mpn_out_str(stdout, 16, a, sc->limbs);
  printf("\n");
}

static void
fe_out_str(const prime_field_t *fe, const fe_t a) {
  mp_limb_t xp[MAX_FIELD_LIMBS];

  fe_get_limbs(fe, xp, a);

  mpn_out_str(stdout, 16, xp, fe->limbs);
}

TORSION_UNUSED static void
fe_print(const prime_field_t *fe, const fe_t a) {
  fe_out_str(fe, a);
  printf("\n");
}

TORSION_UNUSED static void
wge_print(const wei_t *ec, const wge_t *p) {
  const prime_field_t *fe = &ec->fe;

  if (p->inf) {
    printf("(infinity)\n");
  } else {
    printf("(");
    fe_out_str(fe, p->x);
    printf(", ");
    fe_out_str(fe, p->y);
    printf(")\n");
  }
}

TORSION_UNUSED static void
jge_print(const wei_t *ec, const jge_t *p) {
  const prime_field_t *fe = &ec->fe;

  if (p->inf) {
    printf("(infinity)\n");
  } else {
    printf("(");
    fe_out_str(fe, p->x);
    printf(", ");
    fe_out_str(fe, p->y);
    printf(", ");
    fe_out_str(fe, p->z);
    printf(")\n");
  }
}

TORSION_UNUSED static void
mge_print(const mont_t *ec, const mge_t *p) {
  const prime_field_t *fe = &ec->fe;

  if (mge_is_zero(ec, p)) {
    printf("(infinity)\n");
  } else {
    printf("(");
    fe_out_str(fe, p->x);
    printf(", ");
    fe_out_str(fe, p->y);
    printf(")\n");
  }
}

TORSION_UNUSED static void
pge_print(const mont_t *ec, const pge_t *p) {
  const prime_field_t *fe = &ec->fe;

  if (pge_is_zero(ec, p)) {
    printf("(infinity)\n");
  } else {
    printf("(");
    fe_out_str(fe, p->x);
    printf(", ");
    fe_out_str(fe, p->z);
    printf(")\n");
  }
}

TORSION_UNUSED static void
xge_print(const edwards_t *ec, const xge_t *p) {
  const prime_field_t *fe = &ec->fe;

  if (xge_is_zero(ec, p)) {
    printf("(infinity)\n");
  } else {
    printf("(");
    fe_out_str(fe, p->x);
    printf(", ");
    fe_out_str(fe, p->y);
    printf(", ");
    fe_out_str(fe, p->z);
    printf(")\n");
  }
}

/*
 * Point Helpers
 */

static int
wge_equal_raw(const wei_t *ec, const wge_t *a, const unsigned char *b) {
  unsigned char raw[1 + MAX_FIELD_SIZE];
  size_t len;

  if (!wge_export(ec, raw, &len, a, 1))
    return 0;

  return torsion_memcmp(b, raw, len) == 0;
}

static int
jge_equal_raw(const wei_t *ec, const jge_t *a, const unsigned char *b) {
  wge_t t;

  wge_set_jge_var(ec, &t, a);

  return wge_equal_raw(ec, &t, b);
}

static int
mge_equal_raw(const mont_t *ec, const mge_t *a, const unsigned char *b) {
  unsigned char raw[MAX_FIELD_SIZE];

  if (!mge_export(ec, raw, NULL, a))
    return 0;

  return torsion_memcmp(b, raw, ec->fe.size) == 0;
}

static int
pge_equal_raw(const mont_t *ec, const pge_t *a, const unsigned char *b) {
  unsigned char raw[MAX_FIELD_SIZE];

  if (!pge_export(ec, raw, a))
    return 0;

  return torsion_memcmp(b, raw, ec->fe.size) == 0;
}

static int
xge_equal_raw(const edwards_t *ec, const xge_t *a, const unsigned char *b) {
  unsigned char raw[MAX_FIELD_SIZE + 1];

  xge_export(ec, raw, a);

  return torsion_memcmp(b, raw, ec->fe.adj_size) == 0;
}

static int
rge_equal_raw(const edwards_t *ec, const rge_t *a, const unsigned char *b) {
  unsigned char raw[MAX_FIELD_SIZE];

  rge_export(ec, raw, a);

  return torsion_memcmp(b, raw, ec->fe.size) == 0;
}

TORSION_UNUSED static void
wge_set_jge_zinv(const wei_t *ec, wge_t *r, const jge_t *p, const fe_t a) {
  /* https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z
   * 3M + 1S
   */
  const prime_field_t *fe = &ec->fe;
  int inf = fe_is_zero(fe, a);
  fe_t aa;

  ASSERT(!p->inf);

  /* AA = A^2 */
  fe_sqr(fe, aa, a);

  /* X3 = X1 * AA */
  fe_mul(fe, r->x, p->x, aa);

  /* Y3 = Y1 * AA * A */
  fe_mul(fe, r->y, p->y, aa);
  fe_mul(fe, r->y, r->y, a);

  /* Check for infinity. */
  r->inf = inf;
}

static void
jge_scale(const wei_t *ec, jge_t *r, const jge_t *p, const fe_t z) {
  /* https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#scaling-z
   * 4M + 1S
   */
  const prime_field_t *fe = &ec->fe;
  int inf = p->inf | fe_is_zero(fe, z);
  fe_t zz;

  /* ZZ = Z^2 */
  fe_sqr(fe, zz, z);

  /* X3 = X1 * ZZ */
  fe_mul(fe, r->x, p->x, zz);

  /* Y3 = Y1 * ZZ * Z */
  fe_mul(fe, r->y, p->y, zz);
  fe_mul(fe, r->y, r->y, z);

  /* Z3 = Z1 * Z */
  fe_mul(fe, r->z, p->z, z);

  /* Ensure (1, 1, 0) for infinity. */
  fe_select(fe, r->x, r->x, fe->one, inf);
  fe_select(fe, r->y, r->y, fe->one, inf);
  fe_select(fe, r->z, r->z, fe->zero, inf);

  r->inf = inf;
  r->aff = 0;
}

TORSION_UNUSED static void
jge_normalize(const wei_t *ec, jge_t *r, const jge_t *p) {
  const prime_field_t *fe = &ec->fe;
  fe_t zi;

  fe_invert(fe, zi, p->z);
  jge_scale(ec, r, p, zi);

  r->aff = r->inf ^ 1;
}

static void
jge_randomize(const wei_t *ec, jge_t *r, const jge_t *p, drbg_t *rng) {
  const prime_field_t *fe = &ec->fe;
  fe_t z;

  fe_random(fe, z, rng);
  jge_scale(ec, r, p, z);
}

static void
pge_scale(const mont_t *ec, pge_t *r, const pge_t *p, const fe_t z) {
  /* https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#scaling-scale
   * 2M
   */
  const prime_field_t *fe = &ec->fe;

  /* X3 = X1 * Z */
  fe_mul(fe, r->x, p->x, z);

  /* Z3 = Z1 * Z */
  fe_mul(fe, r->z, p->z, z);

  /* Ensure (1, 0) for infinity. */
  fe_select(fe, r->x, r->x, fe->one, fe_is_zero(fe, r->z));
}

static void
pge_normalize(const mont_t *ec, pge_t *r, const pge_t *p) {
  const prime_field_t *fe = &ec->fe;
  fe_t zi;

  fe_invert(fe, zi, p->z);
  pge_scale(ec, r, p, zi);
}

static void
pge_randomize(const mont_t *ec, pge_t *r, const pge_t *p, drbg_t *rng) {
  const prime_field_t *fe = &ec->fe;
  fe_t z;

  fe_random(fe, z, rng);
  pge_scale(ec, r, p, z);
}

static void
xge_scale(const edwards_t *ec, xge_t *r, const xge_t *p, const fe_t z) {
  /* https://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#scaling-z
   * 4M
   */
  const prime_field_t *fe = &ec->fe;

#ifdef TORSION_VERIFY
  ASSERT(!fe_is_zero(fe, z));
  ASSERT(!fe_is_zero(fe, p->z));
#endif

  /* X3 = X1 * Z */
  fe_mul(fe, r->x, p->x, z);

  /* Y3 = Y1 * Z */
  fe_mul(fe, r->y, p->y, z);

  /* Z3 = Z1 * Z */
  fe_mul(fe, r->z, p->z, z);

  /* T3 = T1 * Z */
  fe_mul(fe, r->t, p->t, z);
}

static void
xge_normalize(const edwards_t *ec, xge_t *r, const xge_t *p) {
  const prime_field_t *fe = &ec->fe;
  fe_t zi;

  fe_invert(fe, zi, p->z);
  xge_scale(ec, r, p, zi);
}

static void
xge_randomize(const edwards_t *ec, xge_t *r, const xge_t *p, drbg_t *rng) {
  const prime_field_t *fe = &ec->fe;
  fe_t z;

  fe_random(fe, z, rng);
  xge_scale(ec, r, p, z);
}

static void
rge_normalize(const edwards_t *ec, rge_t *r, const rge_t *p) {
  unsigned char raw[MAX_FIELD_SIZE];

  rge_export(ec, raw, p);

  ASSERT(rge_import(ec, r, raw));
}

/*
 * Helpers
 */

static int
stupid_bytes_zero(const unsigned char *a, size_t n) {
  while (n--) {
    if (a[n] != 0)
      return 0;
  }

  return 1;
}

static int
revcmp(const unsigned char *a, const unsigned char *b, size_t n) {
  while (n--) {
    if (a[n] < b[n])
      return -1;

    if (a[n] > b[n])
      return 1;
  }

  return 0;
}

static unsigned int
drbg_uniform(drbg_t *rng, unsigned int mod) {
  unsigned int x;

  if (mod == 0)
    return 0;

  drbg_generate(rng, &x, sizeof(x));

  return x % mod;
}

/*
 * Memcmp
 */

static void
test_memcmp(drbg_t *unused) {
  static const unsigned char a[4] = {0, 1, 2, 3};
  static const unsigned char b[4] = {0, 1, 2, 3};
  static const unsigned char c[4] = {3, 2, 1, 0};
  static const unsigned char d[4] = {3, 2, 1, 0};

  (void)unused;

  ASSERT(torsion_memcmp(a, b, 4) == 0);
  ASSERT(torsion_memcmp(c, d, 4) == 0);
  ASSERT(torsion_memcmp(a, b, 4) >= 0);
  ASSERT(torsion_memcmp(c, d, 4) >= 0);
  ASSERT(torsion_memcmp(a, b, 4) <= 0);
  ASSERT(torsion_memcmp(c, d, 4) <= 0);
  ASSERT(torsion_memcmp(a, c, 4) != 0);
  ASSERT(torsion_memcmp(c, a, 4) != 0);
  ASSERT(torsion_memcmp(a, c, 4) < 0);
  ASSERT(torsion_memcmp(c, a, 4) > 0);
}

/*
 * Scalar
 */

static void
test_scalar_encoding_secq256k1(drbg_t *unused) {
  static const unsigned char expect1[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  static const unsigned char expect2[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
  };

  scalar_field_t field;
  scalar_field_t *sc = &field;
  mp_limb_t r[MAX_SCALAR_LIMBS];
  mp_limb_t t[MAX_REDUCE_LIMBS];
  unsigned char raw[MAX_SCALAR_SIZE];

  (void)unused;

  printf("  - Testing scalar encoding (secq256k1).\n");

  scalar_field_init(sc, &field_secq256k1, 1);

  sc_export(sc, raw, sc->n);

  mpn_zero(r, ARRAY_SIZE(r));
  mpn_zero(t, ARRAY_SIZE(t));

  mpn_copy(t, sc->n, sc->limbs);

  sc_reduce(sc, r, t);

  ASSERT(sc_is_zero(sc, r));

  raw[sc->size - 1] -= 1;

  ASSERT(sc_import(sc, r, raw));

  raw[sc->size - 1] += 1;

  ASSERT(!sc_import(sc, r, raw));

  raw[sc->size - 1] += 1;

  ASSERT(!sc_import(sc, r, raw));

  sc_export(sc, raw, sc->n);

  ASSERT(!sc_import_reduce(sc, r, raw));

  sc_export(sc, raw, r);

  ASSERT(torsion_memcmp(raw, expect1, 32) == 0);

  sc_export(sc, raw, sc->n);

  raw[sc->size - 1] += 1;

  ASSERT(!sc_import_reduce(sc, r, raw));

  sc_export(sc, raw, r);

  ASSERT(torsion_memcmp(raw, expect2, 32) == 0);
}

static void
test_scalar_encoding_q25519(drbg_t *unused) {
  static const unsigned char expect1[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  static const unsigned char expect2[32] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  scalar_field_t field;
  scalar_field_t *sc = &field;
  mp_limb_t r[MAX_SCALAR_LIMBS];
  mp_limb_t t[MAX_REDUCE_LIMBS];
  unsigned char raw[MAX_SCALAR_SIZE];

  (void)unused;

  printf("  - Testing scalar encoding (q25519).\n");

  scalar_field_init(sc, &field_q25519, -1);

  sc_export(sc, raw, sc->n);

  mpn_zero(r, ARRAY_SIZE(r));
  mpn_zero(t, ARRAY_SIZE(t));

  mpn_copy(t, sc->n, sc->limbs);

  sc_reduce(sc, r, t);

  ASSERT(sc_is_zero(sc, r));

  sc_neg(sc, r, r);

  ASSERT(sc_is_zero(sc, r));

  raw[0] -= 1;

  ASSERT(sc_import(sc, r, raw));

  raw[0] += 1;

  ASSERT(!sc_import(sc, r, raw));

  raw[0] += 1;

  ASSERT(!sc_import(sc, r, raw));

  sc_export(sc, raw, sc->n);

  ASSERT(!sc_import_reduce(sc, r, raw));

  sc_export(sc, raw, r);

  ASSERT(torsion_memcmp(raw, expect1, 32) == 0);

  sc_export(sc, raw, sc->n);

  raw[0] += 1;

  ASSERT(!sc_import_reduce(sc, r, raw));

  sc_export(sc, raw, r);

  ASSERT(torsion_memcmp(raw, expect2, 32) == 0);
}

static void
test_scalar_addsub_secq256k1(drbg_t *rng) {
  scalar_field_t field;
  scalar_field_t *sc = &field;
  sc_t two, a, b, ae, mb, aa1, aa2, ab, a1, a2;
  int i;

  printf("  - Testing scalar arithmetic (secq256k1).\n");

  scalar_field_init(sc, &field_secq256k1, 1);

  sc_set_word(sc, two, 2);

  for (i = 0; i < 100; i++) {
    sc_random(sc, a, rng);
    sc_random(sc, b, rng);

    ASSERT(!sc_is_zero(sc, a));
    ASSERT(!sc_is_zero(sc, b));

    sc_neg(sc, mb, b);
    sc_mul(sc, ae, a, two);

    sc_add(sc, aa1, a, a);
    sc_mul_word(sc, aa2, a, 2);
    sc_add(sc, ab, a, b);
    sc_sub(sc, a1, ab, b);
    sc_add(sc, a2, ab, mb);

    ASSERT(sc_equal(sc, aa1, ae));
    ASSERT(sc_equal(sc, aa2, ae));
    ASSERT(!sc_equal(sc, ab, a));
    ASSERT(sc_equal(sc, a1, a));
    ASSERT(sc_equal(sc, a2, a));

    sc_mul(sc, a1, a, a);
    sc_sqr(sc, a2, a);

    ASSERT(sc_equal(sc, a1, a2));
  }

  sc_zero(sc, a);
  sc_neg(sc, a, a);

  ASSERT(sc_is_zero(sc, a));
}

static void
test_scalar_reduce_secq256k1(drbg_t *unused) {
  static const unsigned char expect[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x51, 0x23, 0x19, 0x50, 0xb7, 0x5f, 0xc4,
    0x40, 0x2d, 0xa1, 0x73, 0x2f, 0xc9, 0xbe, 0xbe
  };

  scalar_field_t field;
  scalar_field_t *sc = &field;
  unsigned char max[32];
  sc_t r;

  (void)unused;

  printf("  - Testing scalar reduction (secq256k1).\n");

  scalar_field_init(sc, &field_secq256k1, 1);

  memset(max, 0xff, 32);

  ASSERT(!sc_import_reduce(sc, r, max));

  sc_export(sc, max, r);

  ASSERT(torsion_memcmp(max, expect, 32) == 0);
}

static void
test_scalar_invert_q251(drbg_t *rng) {
  /* Not tested anywhere else at the moment. */
  static const sc_t one = {1, 0};
  scalar_field_t field;
  scalar_field_t *sc = &field;
  sc_t x, y;

  printf("  - Testing scalar inversion (q251).\n");

  scalar_field_init(sc, &field_q251, -1);

  do {
    sc_random(sc, x, rng);
  } while (sc_equal(sc, x, one));

  ASSERT(sc_invert(sc, y, x));

  ASSERT(!sc_is_zero(sc, x));
  ASSERT(!sc_is_zero(sc, y));

  ASSERT(!sc_equal(sc, x, one));
  ASSERT(!sc_equal(sc, y, one));

  sc_mul(sc, x, x, y);

  ASSERT(sc_equal(sc, x, one));
}

static void
test_scalar_naf(drbg_t *unused) {
  static const sc_t k1 = {53, 0};
  static const sc_t k2 = {102, 0};
  static const int expect1[] = {1, 0, 1, 0, -1, 0, 1};
  static const int expect2[] = {0, -1, 0, 1, 0, -1, 0, 1};
  int naf1[MAX_SCALAR_BITS + 1];
  int naf2[MAX_SCALAR_BITS + 1];
  scalar_field_t sc;

  (void)unused;

  printf("  - Testing NAF.\n");

  scalar_field_init(&sc, &field_secq256k1, 1);

  ASSERT(sc_naf_var(&sc, naf1, k1, 2) == ARRAY_SIZE(expect1));
  ASSERT(sc_naf_var(&sc, naf2, k2, 2) == ARRAY_SIZE(expect2));

  ASSERT(torsion_memcmp(naf1, expect1, sizeof(expect1)) == 0);
  ASSERT(torsion_memcmp(naf2, expect2, sizeof(expect2)) == 0);
}

static void
test_scalar_jsf(drbg_t *unused) {
  static const sc_t k1 = {53, 0};
  static const sc_t k2 = {102, 0};
  static const int expect[] = {-1, -3, 0, -5, 0, 7, 3};
  int jsf[MAX_SCALAR_BITS + 1];
  scalar_field_t sc;

  (void)unused;

  printf("  - Testing JSF.\n");

  scalar_field_init(&sc, &field_secq256k1, 1);

  ASSERT(sc_jsf_var(&sc, jsf, k1, k2) == ARRAY_SIZE(expect));
  ASSERT(torsion_memcmp(jsf, expect, sizeof(expect)) == 0);
}

/*
 * Field Element
 */

static void
test_field_element(drbg_t *unused) {
  prime_field_t field;
  prime_field_t *fe = &field;
  unsigned char raw[MAX_FIELD_SIZE];
  fe_t t;

  (void)unused;

  printf("  - Field element sanity check.\n");

  prime_field_init(fe, &field_p256, 1);

  mpn_export(raw, fe->size, fe->p, fe->limbs, fe->endian);

  raw[fe->size - 1] -= 1;

  ASSERT(fe_import(fe, t, raw));

  raw[fe->size - 1] += 1;

  ASSERT(!fe_import(fe, t, raw));

  raw[7] += 1;

  ASSERT(!fe_import(fe, t, raw));
}

/*
 * Utils
 */

static void
test_bytes_zero(drbg_t *rng) {
  printf("  - Zero bytes sanity check.\n");

  {
    static const unsigned char zero[4] = {0, 0, 0, 0};
    static const unsigned char one[4] = {0, 0, 0, 1};
    static const unsigned char full[4] = {0xff, 0xff, 0xff, 0xff};

    ASSERT(bytes_zero(zero, 4));
    ASSERT(!bytes_zero(one, 4));
    ASSERT(!bytes_zero(full, 4));
  }

  {
    size_t i;

    for (i = 0; i < 1000; i++) {
      unsigned char a[32];

      drbg_generate(rng, a, sizeof(a));

      if (i % 10 == 0)
        memset(a, 0, sizeof(a));

      ASSERT(bytes_zero(a, 32) == stupid_bytes_zero(a, 32));
    }
  }
}

static void
test_bytes_lt(drbg_t *rng) {
  printf("  - LT sanity check.\n");

  {
    static const unsigned char mod[4] = {4, 3, 2, 1};
    static const unsigned char minus1[4] = {3, 3, 2, 1};
    static const unsigned char plus1[4] = {5, 3, 2, 1};
    static const unsigned char full[4] = {0xff, 0xff, 0xff, 0xff};

    ASSERT(bytes_lt(minus1, mod, 4));
    ASSERT(!bytes_lt(mod, mod, 4));
    ASSERT(!bytes_lt(plus1, mod, 4));
    ASSERT(bytes_lt(mod, full, 4));
    ASSERT(!bytes_lt(full, mod, 4));
  }

  {
    size_t i;

    for (i = 0; i < 1000; i++) {
      unsigned char a[32];
      unsigned char b[32];

      drbg_generate(rng, a, sizeof(a));
      drbg_generate(rng, b, sizeof(b));

      ASSERT(bytes_lt(a, a, 32) == 0);
      ASSERT(bytes_lt(b, b, 32) == 0);
      ASSERT(bytes_lt(a, b, 32) == (revcmp(a, b, 32) < 0));
      ASSERT(bytes_lt(b, a, 32) == (revcmp(b, a, 32) < 0));
    }
  }
}

static void
test_mpn_sec_cmp(drbg_t *rng) {
  printf("  - MPN comparison sanity check.\n");

  {
    static const mp_limb_t mod[4] = {4, 3, 2, 1};
    static const mp_limb_t minus1[4] = {3, 3, 2, 1};
    static const mp_limb_t plus1[4] = {5, 3, 2, 1};
    static const mp_limb_t full[4] = {0xff, 0xff, 0xff, 0xff};

    ASSERT(mpn_sec_lt(minus1, mod, 4));
    ASSERT(!mpn_sec_lt(mod, mod, 4));
    ASSERT(!mpn_sec_lt(plus1, mod, 4));
    ASSERT(mpn_sec_lt(mod, full, 4));
    ASSERT(!mpn_sec_lt(full, mod, 4));

    ASSERT(mpn_sec_lte(minus1, mod, 4));
    ASSERT(mpn_sec_lte(mod, mod, 4));
    ASSERT(!mpn_sec_lte(plus1, mod, 4));
    ASSERT(mpn_sec_lte(mod, full, 4));
    ASSERT(!mpn_sec_lte(full, mod, 4));

    ASSERT(!mpn_sec_gt(minus1, mod, 4));
    ASSERT(!mpn_sec_gt(mod, mod, 4));
    ASSERT(mpn_sec_gt(plus1, mod, 4));
    ASSERT(!mpn_sec_gt(mod, full, 4));
    ASSERT(mpn_sec_gt(full, mod, 4));

    ASSERT(!mpn_sec_gte(minus1, mod, 4));
    ASSERT(mpn_sec_gte(mod, mod, 4));
    ASSERT(mpn_sec_gte(plus1, mod, 4));
    ASSERT(!mpn_sec_gte(mod, full, 4));
    ASSERT(mpn_sec_gte(full, mod, 4));

    ASSERT(mpn_sec_cmp(minus1, mod, 4) == -1);
    ASSERT(mpn_sec_cmp(mod, mod, 4) == 0);
    ASSERT(mpn_sec_cmp(plus1, mod, 4) == 1);
    ASSERT(mpn_sec_cmp(mod, full, 4) == -1);
    ASSERT(mpn_sec_cmp(full, mod, 4) == 1);
  }

  {
    size_t i;

    for (i = 0; i < 1000; i++) {
      mp_limb_t a[4];
      mp_limb_t b[4];
      int cab, cba;

      drbg_generate(rng, a, sizeof(a));
      drbg_generate(rng, b, sizeof(b));

      ASSERT(mpn_sec_lt(a, a, 4) == 0);
      ASSERT(mpn_sec_lt(b, b, 4) == 0);
      ASSERT(mpn_sec_lt(a, b, 4) == (mpn_cmp(a, b, 4) < 0));
      ASSERT(mpn_sec_lt(b, a, 4) == (mpn_cmp(b, a, 4) < 0));

      ASSERT(mpn_sec_lte(a, a, 4) == 1);
      ASSERT(mpn_sec_lte(b, b, 4) == 1);
      ASSERT(mpn_sec_lte(a, b, 4) == (mpn_cmp(a, b, 4) <= 0));
      ASSERT(mpn_sec_lte(b, a, 4) == (mpn_cmp(b, a, 4) <= 0));

      ASSERT(mpn_sec_gt(a, a, 4) == 0);
      ASSERT(mpn_sec_gt(b, b, 4) == 0);
      ASSERT(mpn_sec_gt(a, b, 4) == (mpn_cmp(a, b, 4) > 0));
      ASSERT(mpn_sec_gt(b, a, 4) == (mpn_cmp(b, a, 4) > 0));

      ASSERT(mpn_sec_gte(a, a, 4) == 1);
      ASSERT(mpn_sec_gte(b, b, 4) == 1);
      ASSERT(mpn_sec_gte(a, b, 4) == (mpn_cmp(a, b, 4) >= 0));
      ASSERT(mpn_sec_gte(b, a, 4) == (mpn_cmp(b, a, 4) >= 0));

      cab = mpn_cmp(a, b, 4);
      cba = mpn_cmp(b, a, 4);

      if (cab < 0)
        cab = -1;
      else if (cab > 0)
        cab = 1;

      if (cba < 0)
        cba = -1;
      else if (cba > 0)
        cba = 1;

      ASSERT(mpn_sec_cmp(a, a, 4) == 0);
      ASSERT(mpn_sec_cmp(b, b, 4) == 0);
      ASSERT(mpn_sec_cmp(a, b, 4) == cab);
      ASSERT(mpn_sec_cmp(b, a, 4) == cba);
    }
  }
}

/*
 * Weierstrass
 */

static void
test_wei_points(int type,
                const unsigned char points[3][1 + MAX_FIELD_SIZE],
                drbg_t *rng) {
  wei_t *ec = wei_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  jge_t jo, jg, jp, jq, jr;
  wge_t o, g, p, q, r;
  jge_t jmg, jmq, jmr;
  wge_t mg, mq, mr;
  sc_t k, z;

  /*
   * Assignment
   */

  sc_set_word(sc, k, 3);
  sc_zero(sc, z);

  wge_zero(ec, &o);
  wge_set(ec, &g, &ec->g);

  /*
   * Import
   */

  ASSERT(wge_import(ec, &p, points[0], 1 + fe->size));
  ASSERT(wge_import(ec, &q, points[1], 1 + fe->size));
  ASSERT(wge_import(ec, &r, points[2], 1 + fe->size));

  /*
   * Conversion
   */

  jge_set_wge(ec, &jo, &o);
  jge_set_wge(ec, &jg, &g);
  jge_set_wge(ec, &jp, &p);
  jge_set_wge(ec, &jq, &q);
  jge_set_wge(ec, &jr, &r);

  jge_randomize(ec, &jg, &jg, rng);
  jge_randomize(ec, &jp, &jp, rng);
  jge_randomize(ec, &jq, &jq, rng);
  jge_randomize(ec, &jr, &jr, rng);

  /*
   * Validation
   */

  ASSERT(wge_validate(ec, &o));
  ASSERT(wge_validate(ec, &g));
  ASSERT(wge_validate(ec, &p));
  ASSERT(wge_validate(ec, &q));
  ASSERT(wge_validate(ec, &r));
  ASSERT(jge_validate(ec, &jo));
  ASSERT(jge_validate(ec, &jg));
  ASSERT(jge_validate(ec, &jp));
  ASSERT(jge_validate(ec, &jq));
  ASSERT(jge_validate(ec, &jr));

  /*
   * Equality (sanity check)
   */

  ASSERT(wge_equal(ec, &p, &g));
  ASSERT(!wge_equal(ec, &p, &q));
  ASSERT(!wge_equal(ec, &p, &o));
  ASSERT(!wge_is_zero(ec, &p));

  ASSERT(jge_equal(ec, &jp, &jg));
  ASSERT(!jge_equal(ec, &jp, &jq));
  ASSERT(!jge_equal(ec, &jp, &jo));
  ASSERT(!jge_is_zero(ec, &jp));

  /*
   * Affine Negation
   */

  wge_neg(ec, &mg, &g);
  wge_neg(ec, &mq, &q);
  wge_neg(ec, &mr, &r);

  /*
   * Jacobian Negation
   */

  jge_neg(ec, &jmg, &jg);
  jge_neg(ec, &jmq, &jq);
  jge_neg(ec, &jmr, &jr);

  /*
   * Affine (variable time)
   */

  /* Addition */
  wge_add_var(ec, &p, &o, &o); ASSERT(wge_is_zero(ec, &p));
  wge_add_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_add_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_add_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &r));
  wge_add_var(ec, &p, &p, &o); ASSERT(wge_equal(ec, &p, &r));

  /* Subtraction */
  wge_sub_var(ec, &p, &p, &o); ASSERT(wge_equal(ec, &p, &r));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_is_zero(ec, &p));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mg));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mq));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mr));

  /* Addition (swapped argument order) */
  wge_add_var(ec, &p, &o, &o); ASSERT(wge_is_zero(ec, &p));
  wge_add_var(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &g));
  wge_add_var(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &q));
  wge_add_var(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &r));
  wge_add_var(ec, &p, &o, &p); ASSERT(wge_equal(ec, &p, &r));

  /* Addition / Subtraction (same point) */
  wge_set(ec, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_add_var(ec, &p, &p, &p); ASSERT(wge_equal(ec, &p, &q));
  wge_sub_var(ec, &p, &p, &p); ASSERT(wge_is_zero(ec, &p));

  /* Addition (with explicit doubling) */
  wge_dbl_var(ec, &p, &o); ASSERT(wge_is_zero(ec, &p));
  wge_dbl_var(ec, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_add_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &r));

  /* Subtraction (with explicit doubling) */
  wge_sub_var(ec, &p, &o, &g); ASSERT(wge_equal(ec, &p, &mg));
  wge_dbl_var(ec, &p, &p); ASSERT(wge_equal(ec, &p, &mq));
  wge_sub_var(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mr));

  /* Multiplication */
  wei_mul_double_var(ec, &p, k, &o, z); ASSERT(wge_equal(ec, &p, &r));
  wei_mul_double_var(ec, &p, z, &g, k); ASSERT(wge_equal(ec, &p, &r));
  wei_mul_double_var(ec, &p, k, &mg, k); ASSERT(wge_equal(ec, &p, &o));

  /*
   * Affine (constant time)
   */

  /* Addition */
  wge_add(ec, &p, &o, &o); ASSERT(wge_is_zero(ec, &p));
  wge_add(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_add(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_add(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &r));
  wge_add(ec, &p, &p, &o); ASSERT(wge_equal(ec, &p, &r));

  /* Subtraction */
  wge_sub(ec, &p, &p, &o); ASSERT(wge_equal(ec, &p, &r));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_is_zero(ec, &p));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mg));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mq));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mr));

  /* Addition (swapped argument order) */
  wge_add(ec, &p, &o, &o); ASSERT(wge_is_zero(ec, &p));
  wge_add(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &g));
  wge_add(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &q));
  wge_add(ec, &p, &g, &p); ASSERT(wge_equal(ec, &p, &r));
  wge_add(ec, &p, &o, &p); ASSERT(wge_equal(ec, &p, &r));

  /* Addition / Subtraction (same point) */
  wge_set(ec, &p, &g); ASSERT(wge_equal(ec, &p, &g));
  wge_add(ec, &p, &p, &p); ASSERT(wge_equal(ec, &p, &q));
  wge_sub(ec, &p, &p, &p); ASSERT(wge_is_zero(ec, &p));

  /* Addition (with explicit doubling) */
  wge_dbl(ec, &p, &o); ASSERT(wge_is_zero(ec, &p));
  wge_dbl(ec, &p, &g); ASSERT(wge_equal(ec, &p, &q));
  wge_add(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &r));

  /* Subtraction (with explicit doubling) */
  wge_sub(ec, &p, &o, &g); ASSERT(wge_equal(ec, &p, &mg));
  wge_dbl(ec, &p, &p); ASSERT(wge_equal(ec, &p, &mq));
  wge_sub(ec, &p, &p, &g); ASSERT(wge_equal(ec, &p, &mr));

  /* Multiplication */
  wei_mul_g(ec, &p, k); ASSERT(wge_equal(ec, &p, &r));
  wei_mul(ec, &p, &g, k); ASSERT(wge_equal(ec, &p, &r));

  /*
   * Jacobian (variable time)
   */

  /* Addition */
  jge_add_var(ec, &jp, &jo, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_add_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jr));
  jge_add_var(ec, &jp, &jp, &jo); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction */
  jge_sub_var(ec, &jp, &jp, &jo); ASSERT(jge_equal(ec, &jp, &jr));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_is_zero(ec, &jp));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Addition (swapped argument order) */
  jge_add_var(ec, &jp, &jo, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_add_var(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add_var(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add_var(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jr));
  jge_add_var(ec, &jp, &jo, &jp); ASSERT(jge_equal(ec, &jp, &jr));

  /* Addition / Subtraction (same point) */
  jge_set(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add_var(ec, &jp, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jq));
  jge_sub_var(ec, &jp, &jp, &jp); ASSERT(jge_is_zero(ec, &jp));

  /* Addition (with explicit doubling) */
  jge_dbl_var(ec, &jp, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_dbl_var(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction (with explicit doubling) */
  jge_sub_var(ec, &jp, &jo, &jg); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_dbl_var(ec, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_sub_var(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Multiplication */
  wei_jmul_double_var(ec, &jp, k, &o, z); ASSERT(jge_equal(ec, &jp, &jr));
  wei_jmul_double_var(ec, &jp, z, &g, k); ASSERT(jge_equal(ec, &jp, &jr));
  wei_jmul_double_var(ec, &jp, k, &mg, k); ASSERT(jge_equal(ec, &jp, &jo));

  /*
   * Jacobian (constant time)
   */

  /* Addition */
  jge_add(ec, &jp, &jo, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_add(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jr));
  jge_add(ec, &jp, &jp, &jo); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction */
  jge_sub(ec, &jp, &jp, &jo); ASSERT(jge_equal(ec, &jp, &jr));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_is_zero(ec, &jp));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Addition (swapped argument order) */
  jge_add(ec, &jp, &jo, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_add(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add(ec, &jp, &jg, &jp); ASSERT(jge_equal(ec, &jp, &jr));
  jge_add(ec, &jp, &jo, &jp); ASSERT(jge_equal(ec, &jp, &jr));

  /* Addition / Subtraction (same point) */
  jge_set(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jg));
  jge_add(ec, &jp, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jq));
  jge_sub(ec, &jp, &jp, &jp); ASSERT(jge_is_zero(ec, &jp));

  /* Addition (with explicit doubling) */
  jge_dbl(ec, &jp, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_dbl(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_add(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jr));

  /* Addition (with explicit doubling -- jacobian formula) */
  jge_dblj(ec, &jp, &jo); jp.inf = 1; ASSERT(jge_is_zero(ec, &jp));
  jge_dblj(ec, &jp, &jg); jp.inf = 0; ASSERT(jge_equal(ec, &jp, &jq));
  jge_add(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction (with explicit doubling) */
  jge_sub(ec, &jp, &jo, &jg); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_dbl(ec, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_sub(ec, &jp, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Multiplication */
  wei_jmul_g(ec, &jp, k); ASSERT(jge_equal(ec, &jp, &jr));
  wei_jmul(ec, &jp, &g, k); ASSERT(jge_equal(ec, &jp, &jr));

  /*
   * Jacobian (mixed, variable time)
   */

  /* Addition */
  jge_mixed_add_var(ec, &jp, &jo, &o); ASSERT(jge_is_zero(ec, &jp));
  jge_mixed_add_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jg));
  jge_mixed_add_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_add_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jr));
  jge_mixed_add_var(ec, &jp, &jp, &o); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction */
  jge_mixed_sub_var(ec, &jp, &jp, &o); ASSERT(jge_equal(ec, &jp, &jr));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jg));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_is_zero(ec, &jp));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Addition (with explicit doubling) */
  jge_dbl_var(ec, &jp, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_dbl_var(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_add_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction (with explicit doubling) */
  jge_mixed_sub_var(ec, &jp, &jo, &g); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_dbl_var(ec, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_mixed_sub_var(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmr));

  /*
   * Jacobian (mixed, constant time)
   */

  /* Addition */
  jge_mixed_add(ec, &jp, &jo, &o); ASSERT(jge_is_zero(ec, &jp));
  jge_mixed_add(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jg));
  jge_mixed_add(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_add(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jr));
  jge_mixed_add(ec, &jp, &jp, &o); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction */
  jge_mixed_sub(ec, &jp, &jp, &o); ASSERT(jge_equal(ec, &jp, &jr));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jg));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_is_zero(ec, &jp));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmr));

  /* Addition (with explicit doubling) */
  jge_dbl(ec, &jp, &jo); ASSERT(jge_is_zero(ec, &jp));
  jge_dbl(ec, &jp, &jg); ASSERT(jge_equal(ec, &jp, &jq));
  jge_mixed_add(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jr));

  /* Subtraction (with explicit doubling) */
  jge_mixed_sub(ec, &jp, &jo, &g); ASSERT(jge_equal(ec, &jp, &jmg));
  jge_dbl(ec, &jp, &jp); ASSERT(jge_equal(ec, &jp, &jmq));
  jge_mixed_sub(ec, &jp, &jp, &g); ASSERT(jge_equal(ec, &jp, &jmr));

  /*
   * Normalization / Export (variable time)
   */

  wge_set_jge_var(ec, &p, &jr);

  ASSERT(!wge_is_zero(ec, &p));
  ASSERT(wge_equal(ec, &p, &r));
  ASSERT(wge_equal_raw(ec, &p, points[2]));

  /*
   * Normalization / Export (constant time)
   */

  wge_set_jge(ec, &p, &jr);

  ASSERT(!wge_is_zero(ec, &p));
  ASSERT(wge_equal(ec, &p, &r));
  ASSERT(wge_equal_raw(ec, &p, points[2]));

  /*
   * Cleanup
   */

  wei_curve_destroy(ec);
}

static void
test_wei_degenerate_points(int type,
                           const unsigned char points[3][1 + MAX_FIELD_SIZE],
                           const unsigned char expect[4][1 + MAX_FIELD_SIZE]) {
  wei_t *ec = wei_curve_create(type);
  prime_field_t *fe = &ec->fe;
  wge_t p, q0, q1, e0, e1, e2, e3, r;
  jge_t pj, qj0, qj1, ej0, ej1, ej2, ej3, rj, rm;

  ASSERT(wge_import(ec, &p, points[0], 1 + fe->size));
  ASSERT(wge_import(ec, &q0, points[1], 1 + fe->size));
  ASSERT(wge_import(ec, &q1, points[2], 1 + fe->size));
  ASSERT(wge_import(ec, &e0, expect[0], 1 + fe->size));
  ASSERT(wge_import(ec, &e1, expect[1], 1 + fe->size));
  ASSERT(wge_import(ec, &e2, expect[2], 1 + fe->size));
  ASSERT(wge_import(ec, &e3, expect[3], 1 + fe->size));

  jge_set_wge(ec, &pj, &p);
  jge_set_wge(ec, &qj0, &q0);
  jge_set_wge(ec, &qj1, &q1);
  jge_set_wge(ec, &ej0, &e0);
  jge_set_wge(ec, &ej1, &e1);
  jge_set_wge(ec, &ej2, &e2);
  jge_set_wge(ec, &ej3, &e3);

  wge_add(ec, &r, &p, &q0);
  jge_add(ec, &rj, &pj, &qj0);
  jge_mixed_add(ec, &rm, &pj, &q0);

  ASSERT(wge_equal(ec, &r, &e0));
  ASSERT(jge_equal(ec, &rj, &ej0));
  ASSERT(jge_equal(ec, &rm, &ej0));

  ASSERT(wge_equal_raw(ec, &r, expect[0]));
  ASSERT(jge_equal_raw(ec, &rj, expect[0]));
  ASSERT(jge_equal_raw(ec, &rm, expect[0]));

  wge_sub(ec, &r, &p, &q0);
  jge_sub(ec, &rj, &pj, &qj0);
  jge_mixed_sub(ec, &rm, &pj, &q0);

  ASSERT(wge_equal(ec, &r, &e1));
  ASSERT(jge_equal(ec, &rj, &ej1));
  ASSERT(jge_equal(ec, &rm, &ej1));

  ASSERT(wge_equal_raw(ec, &r, expect[1]));
  ASSERT(jge_equal_raw(ec, &rj, expect[1]));
  ASSERT(jge_equal_raw(ec, &rm, expect[1]));

  wge_add(ec, &r, &p, &q1);
  jge_add(ec, &rj, &pj, &qj1);
  jge_mixed_add(ec, &rm, &pj, &q1);

  ASSERT(wge_equal(ec, &r, &e2));
  ASSERT(jge_equal(ec, &rj, &ej2));
  ASSERT(jge_equal(ec, &rm, &ej2));

  ASSERT(wge_equal_raw(ec, &r, expect[2]));
  ASSERT(jge_equal_raw(ec, &rj, expect[2]));
  ASSERT(jge_equal_raw(ec, &rm, expect[2]));

  wge_sub(ec, &r, &p, &q1);
  jge_sub(ec, &rj, &pj, &qj1);
  jge_mixed_sub(ec, &rm, &pj, &q1);

  ASSERT(wge_equal(ec, &r, &e3));
  ASSERT(jge_equal(ec, &rj, &ej3));
  ASSERT(jge_equal(ec, &rm, &ej3));

  ASSERT(wge_equal_raw(ec, &r, expect[3]));
  ASSERT(jge_equal_raw(ec, &rj, expect[3]));
  ASSERT(jge_equal_raw(ec, &rm, expect[3]));

  wei_curve_destroy(ec);
}

static void
test_wei_fuzzy_equality(int type, drbg_t *rng) {
  wei_t *ec = wei_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  mp_limb_t r[MAX_REDUCE_LIMBS];
  wge_t P;
  jge_t J;
  fe_t x;
  sc_t k;

  ASSERT(sc->limbs == fe->limbs);

  /* Generate a field element in the interval [n, p-1]. */
  for (;;) {
    int bits = mpn_bitlen(ec->sc_p, sc->limbs);
    int limbs = (bits + MP_LIMB_BITS - 1) / MP_LIMB_BITS;
    int low = bits % MP_LIMB_BITS;

    mpn_zero(r, ARRAY_SIZE(r));

    drbg_generate(rng, r, limbs * sizeof(mp_limb_t));

    if (low != 0)
      r[limbs - 1] &= (MP_LIMB_C(1) << low) - 1;

    if (mpn_cmp(r, ec->sc_p, fe->limbs) >= 0)
      continue;

    ASSERT(mpn_add_n(r, r, sc->n, fe->limbs) == 0);

    ASSERT(mpn_cmp(r, sc->n, fe->limbs) >= 0);
    ASSERT(mpn_cmp(r, fe->p, fe->limbs) < 0);

    ASSERT(fe_set_sc(fe, sc, x, r));

    if (!wge_set_x(ec, &P, x, drbg_uniform(rng, 2)))
      continue;

    break;
  }

  sc_reduce(sc, k, r);

  ASSERT(mpn_cmp(k, r, sc->limbs) < 0);
  ASSERT(mpn_cmp(k, sc->n, sc->limbs) < 0);

  jge_set_wge(ec, &J, &P);
  jge_randomize(ec, &J, &J, rng);

  ASSERT(jge_equal_r_var(ec, &J, k));

  mpn_add_1(k, k, sc->limbs, 1);

  ASSERT(!jge_equal_r_var(ec, &J, k));

  mpn_sub_1(k, k, sc->limbs, 1);

  ASSERT(jge_equal_r_var(ec, &J, k));

  mpn_sub_1(k, k, sc->limbs, 1);

  ASSERT(!jge_equal_r_var(ec, &J, k));

  /* Now the common case. */
  for (;;) {
    sc_random(sc, k, rng);

    ASSERT(fe_set_sc(fe, sc, x, k));

    if (!wge_set_x(ec, &P, x, drbg_uniform(rng, 2)))
      continue;

    break;
  }

  jge_set_wge(ec, &J, &P);
  jge_randomize(ec, &J, &J, rng);

  ASSERT(jge_equal_r_var(ec, &J, k));

  mpn_add_1(k, k, sc->limbs, 1);

  ASSERT(!jge_equal_r_var(ec, &J, k));

  mpn_sub_1(k, k, sc->limbs, 1);

  ASSERT(jge_equal_r_var(ec, &J, k));

  mpn_sub_1(k, k, sc->limbs, 1);

  ASSERT(!jge_equal_r_var(ec, &J, k));

  wei_curve_destroy(ec);
}

static void
test_wei_mul_g(int type,
               const unsigned char *scalar,
               const unsigned char *expect,
               drbg_t *rng) {
  unsigned char entropy[ENTROPY_SIZE];
  wei_t *ec = wei_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  wge_t q, r;
  sc_t k;

  if (rng != NULL) {
    drbg_generate(rng, entropy, sizeof(entropy));
    wei_randomize(ec, entropy);
  }

  ASSERT(sc_import(sc, k, scalar));
  ASSERT(wge_import(ec, &r, expect, 1 + fe->size));

  wei_mul_g(ec, &q, k);

  ASSERT(wge_equal(ec, &q, &r));
  ASSERT(wge_equal_raw(ec, &q, expect));

  wei_curve_destroy(ec);
}

static void
test_wei_mul(int type,
             const unsigned char *point,
             const unsigned char *scalar,
             const unsigned char *expect) {
  wei_t *ec = wei_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  wge_t p, q, r;
  sc_t k;

  ASSERT(wge_import(ec, &p, point, 1 + fe->size));
  ASSERT(sc_import(sc, k, scalar));
  ASSERT(wge_import(ec, &r, expect, 1 + fe->size));

  wei_mul(ec, &q, &p, k);

  ASSERT(wge_equal(ec, &q, &r));
  ASSERT(wge_equal_raw(ec, &q, expect));

  wei_curve_destroy(ec);
}

static void
test_wei_double_mul(int type,
                    const unsigned char *point,
                    const unsigned char *scalar1,
                    const unsigned char *scalar2,
                    const unsigned char *expect) {
  wei_t *ec = wei_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  wge_t p, q, r;
  sc_t k1, k2;

  ASSERT(wge_import(ec, &p, point, 1 + fe->size));
  ASSERT(sc_import(sc, k1, scalar1));
  ASSERT(sc_import(sc, k2, scalar2));
  ASSERT(wge_import(ec, &r, expect, 1 + fe->size));

  wei_mul_double_var(ec, &q, k1, &p, k2);

  ASSERT(wge_equal(ec, &q, &r));
  ASSERT(wge_equal_raw(ec, &q, expect));

  wei_curve_destroy(ec);
}

static void
test_wei_multi_mul(int type,
                   const unsigned char *point1,
                   const unsigned char *point2,
                   const unsigned char *scalar1,
                   const unsigned char *scalar2,
                   const unsigned char *scalar3,
                   const unsigned char *expect) {
  wei_t *ec = wei_curve_create(type);
  wei_scratch_t *scratch = wei_scratch_create(ec, 2);
  scalar_field_t *sc = &ec->sc;
  prime_field_t *fe = &ec->fe;
  wge_t p1, p2, q, r;
  sc_t k0, k1, k2;
  wge_t points[2];
  sc_t coeffs[2];

  ASSERT(wge_import(ec, &p1, point1, 1 + fe->size));
  ASSERT(wge_import(ec, &p2, point2, 1 + fe->size));
  ASSERT(sc_import(sc, k0, scalar1));
  ASSERT(sc_import(sc, k1, scalar2));
  ASSERT(sc_import(sc, k2, scalar3));
  ASSERT(wge_import(ec, &r, expect, 1 + fe->size));

  wge_set(ec, &points[0], &p1);
  wge_set(ec, &points[1], &p2);

  sc_set(sc, coeffs[0], k1);
  sc_set(sc, coeffs[1], k2);

  wei_mul_multi_var(ec, &q, k0, points, (const sc_t *)coeffs, 2, scratch);

  ASSERT(wge_equal(ec, &q, &r));
  ASSERT(wge_equal_raw(ec, &q, expect));

  wei_scratch_destroy(ec, scratch);
  wei_curve_destroy(ec);
}

static void
test_wei_points_p256(drbg_t *rng) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    /* G, 2G, 3G */
    {
      0x03, 0x6b, 0x17, 0xd1, 0xf2, 0xe1, 0x2c, 0x42,
      0x47, 0xf8, 0xbc, 0xe6, 0xe5, 0x63, 0xa4, 0x40,
      0xf2, 0x77, 0x03, 0x7d, 0x81, 0x2d, 0xeb, 0x33,
      0xa0, 0xf4, 0xa1, 0x39, 0x45, 0xd8, 0x98, 0xc2,
      0x96
    },
    {
      0x03, 0x7c, 0xf2, 0x7b, 0x18, 0x8d, 0x03, 0x4f,
      0x7e, 0x8a, 0x52, 0x38, 0x03, 0x04, 0xb5, 0x1a,
      0xc3, 0xc0, 0x89, 0x69, 0xe2, 0x77, 0xf2, 0x1b,
      0x35, 0xa6, 0x0b, 0x48, 0xfc, 0x47, 0x66, 0x99,
      0x78
    },
    {
      0x02, 0x5e, 0xcb, 0xe4, 0xd1, 0xa6, 0x33, 0x0a,
      0x44, 0xc8, 0xf7, 0xef, 0x95, 0x1d, 0x4b, 0xf1,
      0x65, 0xe6, 0xc6, 0xb7, 0x21, 0xef, 0xad, 0xa9,
      0x85, 0xfb, 0x41, 0x66, 0x1b, 0xc6, 0xe7, 0xfd,
      0x6c
    }
  };

  printf("  - Testing Weierstrass group law (P256).\n");

  test_wei_points(WEI_CURVE_P256, points, rng);
}

static void
test_wei_degenerate_points_p256(drbg_t *unused) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    {
      0x02,
      0xb2, 0xc7, 0xe0, 0x63, 0x56, 0x8f, 0x73, 0x96,
      0xc2, 0x48, 0xe5, 0x7b, 0x5d, 0x90, 0xbd, 0x8d,
      0xc9, 0x04, 0xfc, 0x2c, 0x34, 0x26, 0xcb, 0x0c,
      0x69, 0x99, 0x7e, 0x0c, 0xb3, 0xe5, 0x8b, 0xd9
    },
    {
      0x02,
      0x93, 0x09, 0xb2, 0x48, 0xe5, 0x9d, 0x16, 0xb3,
      0xaa, 0xca, 0xb6, 0xe2, 0xe1, 0x12, 0x6f, 0xbe,
      0x7b, 0x73, 0x06, 0x90, 0xce, 0x2c, 0x5c, 0x6c,
      0x1e, 0x92, 0x1b, 0x50, 0x82, 0x1c, 0x24, 0xdc
    },
    {
      0x02,
      0xba, 0x2e, 0x6d, 0x51, 0xc3, 0xd3, 0x75, 0xb7,
      0x92, 0xec, 0x63, 0xa1, 0xc1, 0x5c, 0xd2, 0xb3,
      0xbb, 0x87, 0xfd, 0x44, 0xfd, 0xac, 0xd8, 0x87,
      0x77, 0xd4, 0x66, 0xa2, 0xc9, 0xfe, 0x4f, 0x49
    }
  };

  static const unsigned char expect[4][1 + MAX_FIELD_SIZE] = {
    {
      0x03,
      0xba, 0x2e, 0x6d, 0x51, 0xc3, 0xd3, 0x75, 0xb7,
      0x92, 0xec, 0x63, 0xa1, 0xc1, 0x5c, 0xd2, 0xb3,
      0xbb, 0x87, 0xfd, 0x44, 0xfd, 0xac, 0xd8, 0x87,
      0x77, 0xd4, 0x66, 0xa2, 0xc9, 0xfe, 0x4f, 0x49
    },
    {
      0x03,
      0x01, 0xd9, 0x60, 0x54, 0x08, 0x28, 0x36, 0x32,
      0xd1, 0x7d, 0xb7, 0xaf, 0xe1, 0x61, 0xf1, 0x96,
      0x36, 0x9e, 0x95, 0x8d, 0x85, 0x52, 0x72, 0x02,
      0xec, 0x32, 0xbd, 0xf6, 0x85, 0x42, 0x8b, 0x3b
    },
    {
      0x03,
      0x93, 0x09, 0xb2, 0x48, 0xe5, 0x9d, 0x16, 0xb3,
      0xaa, 0xca, 0xb6, 0xe2, 0xe1, 0x12, 0x6f, 0xbe,
      0x7b, 0x73, 0x06, 0x90, 0xce, 0x2c, 0x5c, 0x6c,
      0x1e, 0x92, 0x1b, 0x50, 0x82, 0x1c, 0x24, 0xdc
    },
    {
      0x03,
      0x8f, 0x10, 0xc5, 0xc1, 0x8d, 0x37, 0x41, 0x88,
      0x7d, 0xb9, 0x69, 0x25, 0x87, 0x05, 0xe2, 0x47,
      0xf5, 0xbc, 0x73, 0x87, 0x77, 0x9a, 0xce, 0x65,
      0x30, 0x51, 0x2c, 0xf4, 0xbd, 0xef, 0x1a, 0x4c
    }
  };

  (void)unused;

  printf("  - Testing Weierstrass degenerate points (P256).\n");

  test_wei_degenerate_points(WEI_CURVE_P256, points, expect);
}

static void
test_wei_fuzzy_equality_p256(drbg_t *rng) {
  printf("  - Testing fuzzy equality (P256).\n");

  test_wei_fuzzy_equality(WEI_CURVE_P256, rng);
}

static void
test_wei_points_p521(drbg_t *rng) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    /* G, 2G, 3G */
    {
      0x02, 0x00, 0xc6, 0x85, 0x8e, 0x06, 0xb7, 0x04,
      0x04, 0xe9, 0xcd, 0x9e, 0x3e, 0xcb, 0x66, 0x23,
      0x95, 0xb4, 0x42, 0x9c, 0x64, 0x81, 0x39, 0x05,
      0x3f, 0xb5, 0x21, 0xf8, 0x28, 0xaf, 0x60, 0x6b,
      0x4d, 0x3d, 0xba, 0xa1, 0x4b, 0x5e, 0x77, 0xef,
      0xe7, 0x59, 0x28, 0xfe, 0x1d, 0xc1, 0x27, 0xa2,
      0xff, 0xa8, 0xde, 0x33, 0x48, 0xb3, 0xc1, 0x85,
      0x6a, 0x42, 0x9b, 0xf9, 0x7e, 0x7e, 0x31, 0xc2,
      0xe5, 0xbd, 0x66
    },
    {
      0x02, 0x00, 0x43, 0x3c, 0x21, 0x90, 0x24, 0x27,
      0x7e, 0x7e, 0x68, 0x2f, 0xcb, 0x28, 0x81, 0x48,
      0xc2, 0x82, 0x74, 0x74, 0x03, 0x27, 0x9b, 0x1c,
      0xcc, 0x06, 0x35, 0x2c, 0x6e, 0x55, 0x05, 0xd7,
      0x69, 0xbe, 0x97, 0xb3, 0xb2, 0x04, 0xda, 0x6e,
      0xf5, 0x55, 0x07, 0xaa, 0x10, 0x4a, 0x3a, 0x35,
      0xc5, 0xaf, 0x41, 0xcf, 0x2f, 0xa3, 0x64, 0xd6,
      0x0f, 0xd9, 0x67, 0xf4, 0x3e, 0x39, 0x33, 0xba,
      0x6d, 0x78, 0x3d
    },
    {
      0x03, 0x01, 0xa7, 0x3d, 0x35, 0x24, 0x43, 0xde,
      0x29, 0x19, 0x5d, 0xd9, 0x1d, 0x6a, 0x64, 0xb5,
      0x95, 0x94, 0x79, 0xb5, 0x2a, 0x6e, 0x5b, 0x12,
      0x3d, 0x9a, 0xb9, 0xe5, 0xad, 0x7a, 0x11, 0x2d,
      0x7a, 0x8d, 0xd1, 0xad, 0x3f, 0x16, 0x4a, 0x3a,
      0x48, 0x32, 0x05, 0x1d, 0xa6, 0xbd, 0x16, 0xb5,
      0x9f, 0xe2, 0x1b, 0xae, 0xb4, 0x90, 0x86, 0x2c,
      0x32, 0xea, 0x05, 0xa5, 0x91, 0x9d, 0x2e, 0xde,
      0x37, 0xad, 0x7d
    }
  };

  printf("  - Testing Weierstrass group law (P521).\n");

  test_wei_points(WEI_CURVE_P521, points, rng);
}

static void
test_wei_degenerate_points_p521(drbg_t *unused) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    {
      0x03,
      0x00, 0x37, 0x0c, 0xb9, 0xf6, 0x4e, 0xc3, 0xa3,
      0xd3, 0xbe, 0xb0, 0x62, 0xe7, 0x59, 0x8a, 0x0c,
      0x3b, 0xd1, 0x47, 0xf9, 0xda, 0xf7, 0x69, 0x30,
      0xc1, 0xe3, 0xa7, 0x7e, 0x5c, 0xd8, 0x50, 0xbe,
      0x7c, 0xee, 0x5b, 0x65, 0x39, 0xd4, 0xe3, 0x83,
      0xe2, 0x94, 0xbc, 0x8f, 0xd5, 0x2e, 0xa6, 0xb7,
      0x9f, 0x6a, 0x5d, 0x16, 0x31, 0x01, 0x70, 0x3b,
      0x25, 0x0e, 0xc1, 0x57, 0xf8, 0x41, 0x5c, 0xb1,
      0xdd, 0xdb
    },
    {
      0x03,
      0x00, 0x60, 0xc7, 0xfb, 0x90, 0xcc, 0xe7, 0xe0,
      0x26, 0x6e, 0x29, 0xbb, 0x2c, 0xbf, 0x64, 0xf3,
      0x33, 0xa6, 0xc2, 0xbc, 0xb4, 0x7c, 0xae, 0x2d,
      0x59, 0xcc, 0xbd, 0x4e, 0x48, 0x78, 0x96, 0x6c,
      0xbd, 0xb4, 0xb0, 0xec, 0x15, 0x72, 0xe6, 0xd6,
      0xe3, 0x73, 0xfd, 0xc8, 0xa9, 0x16, 0xf8, 0xe7,
      0x7c, 0xfa, 0xa1, 0xd6, 0xcf, 0x01, 0x05, 0x7b,
      0xcf, 0xd4, 0xd0, 0x07, 0x25, 0x32, 0x0d, 0xfd,
      0xec, 0x0e
    },
    {
      0x03,
      0x01, 0x68, 0x2b, 0x4a, 0x78, 0xe4, 0x54, 0x7c,
      0x05, 0xd3, 0x25, 0xe1, 0xeb, 0xe7, 0x11, 0x00,
      0x90, 0x87, 0xf5, 0x49, 0x70, 0x8b, 0xe8, 0xa1,
      0xe4, 0x4f, 0x9b, 0x33, 0x5a, 0xaf, 0x18, 0xd4,
      0xc5, 0x5c, 0xf3, 0xae, 0xb0, 0xb8, 0x35, 0xa5,
      0x39, 0xf7, 0x45, 0xa7, 0x81, 0xba, 0x60, 0x60,
      0xe3, 0x9b, 0x01, 0x12, 0xff, 0xfd, 0x8a, 0x49,
      0x0b, 0x1c, 0x6e, 0xa0, 0xe2, 0x8c, 0x95, 0x50,
      0x36, 0x16
    }
  };

  static const unsigned char expect[4][1 + MAX_FIELD_SIZE] = {
    {
      0x02,
      0x01, 0x68, 0x2b, 0x4a, 0x78, 0xe4, 0x54, 0x7c,
      0x05, 0xd3, 0x25, 0xe1, 0xeb, 0xe7, 0x11, 0x00,
      0x90, 0x87, 0xf5, 0x49, 0x70, 0x8b, 0xe8, 0xa1,
      0xe4, 0x4f, 0x9b, 0x33, 0x5a, 0xaf, 0x18, 0xd4,
      0xc5, 0x5c, 0xf3, 0xae, 0xb0, 0xb8, 0x35, 0xa5,
      0x39, 0xf7, 0x45, 0xa7, 0x81, 0xba, 0x60, 0x60,
      0xe3, 0x9b, 0x01, 0x12, 0xff, 0xfd, 0x8a, 0x49,
      0x0b, 0x1c, 0x6e, 0xa0, 0xe2, 0x8c, 0x95, 0x50,
      0x36, 0x16
    },
    {
      0x03,
      0x01, 0xe4, 0x58, 0xef, 0x92, 0x5f, 0x9b, 0x77,
      0x08, 0xda, 0xc6, 0xe8, 0x90, 0xcb, 0xbe, 0x41,
      0xe9, 0x13, 0xaa, 0x38, 0xcd, 0x89, 0x13, 0x4b,
      0x49, 0x6e, 0x0f, 0x56, 0xde, 0xf8, 0x90, 0xda,
      0x39, 0xef, 0x90, 0xb0, 0x03, 0x3f, 0x57, 0x2c,
      0x51, 0xca, 0x02, 0x06, 0x3e, 0x8b, 0x9b, 0x0f,
      0x15, 0xab, 0x41, 0x1d, 0xbb, 0x0c, 0x52, 0x8d,
      0x56, 0xf1, 0x82, 0xb4, 0xcf, 0x60, 0x86, 0x32,
      0xb9, 0x9a
    },
    {
      0x02,
      0x00, 0x60, 0xc7, 0xfb, 0x90, 0xcc, 0xe7, 0xe0,
      0x26, 0x6e, 0x29, 0xbb, 0x2c, 0xbf, 0x64, 0xf3,
      0x33, 0xa6, 0xc2, 0xbc, 0xb4, 0x7c, 0xae, 0x2d,
      0x59, 0xcc, 0xbd, 0x4e, 0x48, 0x78, 0x96, 0x6c,
      0xbd, 0xb4, 0xb0, 0xec, 0x15, 0x72, 0xe6, 0xd6,
      0xe3, 0x73, 0xfd, 0xc8, 0xa9, 0x16, 0xf8, 0xe7,
      0x7c, 0xfa, 0xa1, 0xd6, 0xcf, 0x01, 0x05, 0x7b,
      0xcf, 0xd4, 0xd0, 0x07, 0x25, 0x32, 0x0d, 0xfd,
      0xec, 0x0e
    },
    {
      0x03,
      0x01, 0xde, 0xd3, 0xd2, 0x22, 0xa2, 0x4d, 0x8a,
      0x5e, 0x92, 0xf6, 0x56, 0x51, 0xd3, 0x0e, 0xba,
      0x58, 0x9d, 0xa4, 0xbe, 0x74, 0xae, 0x3f, 0xfb,
      0x42, 0x1d, 0x1f, 0x92, 0x68, 0xd2, 0xd7, 0x66,
      0x47, 0x84, 0x48, 0x7e, 0x50, 0xe2, 0x05, 0xb0,
      0x51, 0x39, 0x3e, 0x3c, 0x6c, 0xd3, 0x6a, 0xbb,
      0x37, 0x7c, 0x3d, 0x1a, 0xdf, 0x2c, 0x82, 0x52,
      0x9d, 0x10, 0xe5, 0x3d, 0x7e, 0x3a, 0x7e, 0x0d,
      0xff, 0xcd
    }
  };

  (void)unused;

  printf("  - Testing Weierstrass degenerate points (P521).\n");

  test_wei_degenerate_points(WEI_CURVE_P521, points, expect);
}

static void
test_wei_points_secp256k1(drbg_t *rng) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    /* G, 2G, 3G */
    {
      0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb,
      0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b,
      0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28,
      0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17,
      0x98
    },
    {
      0x02, 0xc6, 0x04, 0x7f, 0x94, 0x41, 0xed, 0x7d,
      0x6d, 0x30, 0x45, 0x40, 0x6e, 0x95, 0xc0, 0x7c,
      0xd8, 0x5c, 0x77, 0x8e, 0x4b, 0x8c, 0xef, 0x3c,
      0xa7, 0xab, 0xac, 0x09, 0xb9, 0x5c, 0x70, 0x9e,
      0xe5
    },
    {
      0x02, 0xf9, 0x30, 0x8a, 0x01, 0x92, 0x58, 0xc3,
      0x10, 0x49, 0x34, 0x4f, 0x85, 0xf8, 0x9d, 0x52,
      0x29, 0xb5, 0x31, 0xc8, 0x45, 0x83, 0x6f, 0x99,
      0xb0, 0x86, 0x01, 0xf1, 0x13, 0xbc, 0xe0, 0x36,
      0xf9
    }
  };

  printf("  - Testing Weierstrass group law (SECP256K1).\n");

  test_wei_points(WEI_CURVE_SECP256K1, points, rng);
}

static void
test_wei_degenerate_points_secp256k1(drbg_t *unused) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    {
      0x02,
      0xbe, 0xe3, 0x49, 0xd9, 0x33, 0x15, 0xef, 0x2c,
      0x88, 0x1c, 0xb7, 0xf0, 0xb0, 0xf9, 0x23, 0x12,
      0x2d, 0xfc, 0xa9, 0x31, 0xd1, 0xfc, 0x84, 0x07,
      0x47, 0xd1, 0x06, 0xa0, 0x0e, 0x4b, 0xcb, 0xe4
    },
    {
      0x02,
      0x99, 0x74, 0x62, 0xec, 0x2c, 0x13, 0x88, 0x06,
      0x27, 0x05, 0xfe, 0x0d, 0x08, 0xfc, 0xe1, 0xef,
      0x95, 0xc3, 0xab, 0xbc, 0xed, 0xfb, 0x0a, 0x72,
      0x2f, 0x7e, 0x2c, 0xc2, 0x8b, 0xdb, 0x05, 0x93
    },
    {
      0x02,
      0xa7, 0xa8, 0x53, 0x3a, 0xa0, 0xd6, 0x88, 0xcd,
      0x50, 0xdd, 0x4a, 0x02, 0x46, 0x09, 0xfa, 0xfe,
      0x3c, 0x3f, 0xab, 0x11, 0x40, 0x08, 0x71, 0x86,
      0x88, 0xb0, 0xcc, 0x9b, 0x65, 0xd9, 0x26, 0xe7
    }
  };

  static const unsigned char expect[4][1 + MAX_FIELD_SIZE] = {
    {
      0x03,
      0xa7, 0xa8, 0x53, 0x3a, 0xa0, 0xd6, 0x88, 0xcd,
      0x50, 0xdd, 0x4a, 0x02, 0x46, 0x09, 0xfa, 0xfe,
      0x3c, 0x3f, 0xab, 0x11, 0x40, 0x08, 0x71, 0x86,
      0x88, 0xb0, 0xcc, 0x9b, 0x65, 0xd9, 0x26, 0xe7
    },
    {
      0x02,
      0xea, 0x46, 0xa1, 0x52, 0x24, 0x86, 0xc0, 0x5c,
      0x4d, 0x86, 0x94, 0x11, 0xfd, 0x7f, 0xbc, 0xe6,
      0x02, 0x73, 0x7e, 0xe9, 0x92, 0x7f, 0xbd, 0x80,
      0x30, 0x79, 0x1e, 0x47, 0x53, 0x40, 0x14, 0xa4
    },
    {
      0x03,
      0x99, 0x74, 0x62, 0xec, 0x2c, 0x13, 0x88, 0x06,
      0x27, 0x05, 0xfe, 0x0d, 0x08, 0xfc, 0xe1, 0xef,
      0x95, 0xc3, 0xab, 0xbc, 0xed, 0xfb, 0x0a, 0x72,
      0x2f, 0x7e, 0x2c, 0xc2, 0x8b, 0xdb, 0x05, 0x93
    },
    {
      0x03,
      0x0f, 0xbb, 0x13, 0xfb, 0xfa, 0xc4, 0x1e, 0xff,
      0x77, 0x0c, 0x4a, 0xab, 0x4c, 0xd8, 0x1a, 0xd6,
      0xaf, 0x3e, 0x26, 0x0d, 0x9f, 0xe0, 0xf5, 0xb0,
      0xe4, 0x30, 0xa8, 0xb7, 0x51, 0x67, 0xae, 0x6f
    }
  };

  (void)unused;

  printf("  - Testing Weierstrass degenerate points (SECP256K1).\n");

  test_wei_degenerate_points(WEI_CURVE_SECP256K1, points, expect);
}

static void
test_wei_fuzzy_equality_secp256k1(drbg_t *rng) {
  printf("  - Testing fuzzy equality (SECP256K1).\n");

  test_wei_fuzzy_equality(WEI_CURVE_SECP256K1, rng);
}

static void
test_wei_scalar_decomposition_secp256k1(drbg_t *rng) {
  /* See: https://github.com/bitcoin-core/secp256k1/pull/822 */

  /* k1_bound = (a1 + a2 - 1) / 2 */
  static const unsigned char k1_bound[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa2, 0xa8, 0x91, 0x8c, 0xa8, 0x5b, 0xaf, 0xe2,
    0x20, 0x16, 0xd0, 0xb9, 0x17, 0xe4, 0xdd, 0x76
  };

  /* k2_bound = (-b1 + b2) / 2 */
  static const unsigned char k2_bound[32] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x8a, 0x65, 0x28, 0x7b, 0xd4, 0x71, 0x79, 0xfb,
    0x2b, 0xe0, 0x88, 0x46, 0xce, 0xa2, 0x67, 0xec
  };

  /* Scalars which split near the above bounds.
   *
   * Generated with:
   *
   *   k = (a * lambda + (n + b) / 2) mod n
   *
   * Where a = (-2, -1, 0, 1, 2)
   *       b = (-3, -1, 1, 3)
   */
  static const unsigned char scalars[][32] = {
    {
      0xd9, 0x38, 0xa5, 0x66, 0x7f, 0x47, 0x9e, 0x3e,
      0xb5, 0xb3, 0xc7, 0xfa, 0xef, 0xdb, 0x37, 0x49,
      0xf3, 0xaa, 0x05, 0x85, 0xc5, 0xea, 0x23, 0x67,
      0xe1, 0xb6, 0x60, 0xdb, 0x02, 0x09, 0xe6, 0xfc
    },
    {
      0xd9, 0x38, 0xa5, 0x66, 0x7f, 0x47, 0x9e, 0x3e,
      0xb5, 0xb3, 0xc7, 0xfa, 0xef, 0xdb, 0x37, 0x49,
      0xf3, 0xaa, 0x05, 0x85, 0xc5, 0xea, 0x23, 0x67,
      0xe1, 0xb6, 0x60, 0xdb, 0x02, 0x09, 0xe6, 0xfd
    },
    {
      0xd9, 0x38, 0xa5, 0x66, 0x7f, 0x47, 0x9e, 0x3e,
      0xb5, 0xb3, 0xc7, 0xfa, 0xef, 0xdb, 0x37, 0x49,
      0xf3, 0xaa, 0x05, 0x85, 0xc5, 0xea, 0x23, 0x67,
      0xe1, 0xb6, 0x60, 0xdb, 0x02, 0x09, 0xe6, 0xfe
    },
    {
      0xd9, 0x38, 0xa5, 0x66, 0x7f, 0x47, 0x9e, 0x3e,
      0xb5, 0xb3, 0xc7, 0xfa, 0xef, 0xdb, 0x37, 0x49,
      0xf3, 0xaa, 0x05, 0x85, 0xc5, 0xea, 0x23, 0x67,
      0xe1, 0xb6, 0x60, 0xdb, 0x02, 0x09, 0xe6, 0xff
    },
    {
      0x2c, 0x9c, 0x52, 0xb3, 0x3f, 0xa3, 0xcf, 0x1f,
      0x5a, 0xd9, 0xe3, 0xfd, 0x77, 0xed, 0x9b, 0xa5,
      0x4b, 0x29, 0x4b, 0x89, 0x37, 0x22, 0xe9, 0xa5,
      0x00, 0xe6, 0x98, 0xca, 0x4c, 0xf7, 0x63, 0x2d
    },
    {
      0x2c, 0x9c, 0x52, 0xb3, 0x3f, 0xa3, 0xcf, 0x1f,
      0x5a, 0xd9, 0xe3, 0xfd, 0x77, 0xed, 0x9b, 0xa5,
      0x4b, 0x29, 0x4b, 0x89, 0x37, 0x22, 0xe9, 0xa5,
      0x00, 0xe6, 0x98, 0xca, 0x4c, 0xf7, 0x63, 0x2e
    },
    {
      0x2c, 0x9c, 0x52, 0xb3, 0x3f, 0xa3, 0xcf, 0x1f,
      0x5a, 0xd9, 0xe3, 0xfd, 0x77, 0xed, 0x9b, 0xa5,
      0x4b, 0x29, 0x4b, 0x89, 0x37, 0x22, 0xe9, 0xa5,
      0x00, 0xe6, 0x98, 0xca, 0x4c, 0xf7, 0x63, 0x2f
    },
    {
      0x2c, 0x9c, 0x52, 0xb3, 0x3f, 0xa3, 0xcf, 0x1f,
      0x5a, 0xd9, 0xe3, 0xfd, 0x77, 0xed, 0x9b, 0xa5,
      0x4b, 0x29, 0x4b, 0x89, 0x37, 0x22, 0xe9, 0xa5,
      0x00, 0xe6, 0x98, 0xca, 0x4c, 0xf7, 0x63, 0x30
    },
    {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x5d, 0x57, 0x6e, 0x73, 0x57, 0xa4, 0x50, 0x1d,
      0xdf, 0xe9, 0x2f, 0x46, 0x68, 0x1b, 0x20, 0x9f
    },
    {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x5d, 0x57, 0x6e, 0x73, 0x57, 0xa4, 0x50, 0x1d,
      0xdf, 0xe9, 0x2f, 0x46, 0x68, 0x1b, 0x20, 0xa0
    },
    {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x5d, 0x57, 0x6e, 0x73, 0x57, 0xa4, 0x50, 0x1d,
      0xdf, 0xe9, 0x2f, 0x46, 0x68, 0x1b, 0x20, 0xa1
    },
    {
      0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x5d, 0x57, 0x6e, 0x73, 0x57, 0xa4, 0x50, 0x1d,
      0xdf, 0xe9, 0x2f, 0x46, 0x68, 0x1b, 0x20, 0xa2
    },
    {
      0xd3, 0x63, 0xad, 0x4c, 0xc0, 0x5c, 0x30, 0xe0,
      0xa5, 0x26, 0x1c, 0x02, 0x88, 0x12, 0x64, 0x59,
      0x6f, 0x85, 0x91, 0x5d, 0x78, 0x25, 0xb6, 0x96,
      0xbe, 0xeb, 0xc5, 0xc2, 0x83, 0x3e, 0xde, 0x11
    },
    {
      0xd3, 0x63, 0xad, 0x4c, 0xc0, 0x5c, 0x30, 0xe0,
      0xa5, 0x26, 0x1c, 0x02, 0x88, 0x12, 0x64, 0x59,
      0x6f, 0x85, 0x91, 0x5d, 0x78, 0x25, 0xb6, 0x96,
      0xbe, 0xeb, 0xc5, 0xc2, 0x83, 0x3e, 0xde, 0x12
    },
    {
      0xd3, 0x63, 0xad, 0x4c, 0xc0, 0x5c, 0x30, 0xe0,
      0xa5, 0x26, 0x1c, 0x02, 0x88, 0x12, 0x64, 0x59,
      0x6f, 0x85, 0x91, 0x5d, 0x78, 0x25, 0xb6, 0x96,
      0xbe, 0xeb, 0xc5, 0xc2, 0x83, 0x3e, 0xde, 0x13
    },
    {
      0xd3, 0x63, 0xad, 0x4c, 0xc0, 0x5c, 0x30, 0xe0,
      0xa5, 0x26, 0x1c, 0x02, 0x88, 0x12, 0x64, 0x59,
      0x6f, 0x85, 0x91, 0x5d, 0x78, 0x25, 0xb6, 0x96,
      0xbe, 0xeb, 0xc5, 0xc2, 0x83, 0x3e, 0xde, 0x14
    },
    {
      0x26, 0xc7, 0x5a, 0x99, 0x80, 0xb8, 0x61, 0xc1,
      0x4a, 0x4c, 0x38, 0x05, 0x10, 0x24, 0xc8, 0xb4,
      0xc7, 0x04, 0xd7, 0x60, 0xe9, 0x5e, 0x7c, 0xd3,
      0xde, 0x1b, 0xfd, 0xb1, 0xce, 0x2c, 0x5a, 0x42
    },
    {
      0x26, 0xc7, 0x5a, 0x99, 0x80, 0xb8, 0x61, 0xc1,
      0x4a, 0x4c, 0x38, 0x05, 0x10, 0x24, 0xc8, 0xb4,
      0xc7, 0x04, 0xd7, 0x60, 0xe9, 0x5e, 0x7c, 0xd3,
      0xde, 0x1b, 0xfd, 0xb1, 0xce, 0x2c, 0x5a, 0x43
    },
    {
      0x26, 0xc7, 0x5a, 0x99, 0x80, 0xb8, 0x61, 0xc1,
      0x4a, 0x4c, 0x38, 0x05, 0x10, 0x24, 0xc8, 0xb4,
      0xc7, 0x04, 0xd7, 0x60, 0xe9, 0x5e, 0x7c, 0xd3,
      0xde, 0x1b, 0xfd, 0xb1, 0xce, 0x2c, 0x5a, 0x44
    },
    {
      0x26, 0xc7, 0x5a, 0x99, 0x80, 0xb8, 0x61, 0xc1,
      0x4a, 0x4c, 0x38, 0x05, 0x10, 0x24, 0xc8, 0xb4,
      0xc7, 0x04, 0xd7, 0x60, 0xe9, 0x5e, 0x7c, 0xd3,
      0xde, 0x1b, 0xfd, 0xb1, 0xce, 0x2c, 0x5a, 0x45
    }
  };

  wei_t *ec = wei_curve_create(WEI_CURVE_SECP256K1);
  scalar_field_t *sc = &ec->sc;
  sc_t k1b, k2b;
  size_t i;

  printf("  - Testing scalar decomposition (SECP256K1).\n");

  sc_import(sc, k1b, k1_bound);
  sc_import(sc, k2b, k2_bound);

  /* Check random scalars. */
  for (i = 0; i < 100; i++) {
    sc_t k, k1, k2, s;

    sc_random(sc, k, rng);

    wei_endo_split(ec, k1, k2, k);

    sc_mul(sc, s, ec->lambda, k2);
    sc_neg(sc, s, s);
    sc_add(sc, s, s, k1);

    sc_minimize(sc, k1, k1);
    sc_minimize(sc, k2, k2);

    ASSERT(sc_equal(sc, s, k));
    ASSERT(sc_cmp_var(sc, k1, k1b) <= 0);
    ASSERT(sc_cmp_var(sc, k2, k2b) <= 0);
  }

  /* Check scalars which split near bounds. */
  for (i = 0; i < ARRAY_SIZE(scalars); i++) {
    sc_t k, k1, k2, s;

    sc_import(sc, k, scalars[i]);

    wei_endo_split(ec, k1, k2, k);

    sc_mul(sc, s, ec->lambda, k2);
    sc_neg(sc, s, s);
    sc_add(sc, s, s, k1);

    sc_minimize(sc, k1, k1);
    sc_minimize(sc, k2, k2);

    ASSERT(sc_equal(sc, s, k));
    ASSERT(sc_cmp_var(sc, k1, k1b) <= 0);
    ASSERT(sc_cmp_var(sc, k2, k2b) <= 0);
  }

  /* Verify P * k + P * r + P * -(k + r) = O. */
  /* Where r is a random integer in [1,n-1]. */
  for (i = 0; i < ARRAY_SIZE(scalars); i++) {
    static const wge_t O = {{0}, {0}, 1};
    static const sc_t zero = {0};
    jge_t P0, P1, P2;
    sc_t k, k1, k2;
    int mode;

    sc_import(sc, k, scalars[i]);
    sc_random(sc, k1, rng);
    sc_add(sc, k2, k, k1);
    sc_neg(sc, k2, k2);

    for (mode = 0; mode < 4; mode++) {
      if (mode == 0) {
        wei_jmul_g(ec, &P0, k);
        wei_jmul_g(ec, &P1, k1);
        wei_jmul_g(ec, &P2, k2);
      } else if (mode == 1) {
        wei_jmul(ec, &P0, &ec->g, k);
        wei_jmul(ec, &P1, &ec->g, k1);
        wei_jmul(ec, &P2, &ec->g, k2);
      } else if (mode == 2) {
        wei_jmul_double_var(ec, &P0, k, &O, zero);
        wei_jmul_double_var(ec, &P1, k1, &O, zero);
        wei_jmul_double_var(ec, &P2, k2, &O, zero);
      } else {
        wei_jmul_double_var(ec, &P0, zero, &ec->g, k);
        wei_jmul_double_var(ec, &P1, zero, &ec->g, k1);
        wei_jmul_double_var(ec, &P2, zero, &ec->g, k2);
      }

      jge_add(ec, &P0, &P0, &P1);
      jge_add(ec, &P0, &P0, &P2);

      ASSERT(jge_is_zero(ec, &P0));
    }
  }

  wei_curve_destroy(ec);
}

static void
test_wei_mul_g_p256(drbg_t *rng) {
  static const unsigned char scalar[32] = {
    0x38, 0xf8, 0x62, 0x0b, 0xa6, 0x0b, 0xed, 0x7c,
    0xf9, 0x0c, 0x7a, 0x99, 0xac, 0x35, 0xa4, 0x4e,
    0x39, 0x27, 0x59, 0x8e, 0x3c, 0x99, 0xbb, 0xc5,
    0xf5, 0x70, 0x75, 0x13, 0xc4, 0x0e, 0x2c, 0xe3
  };

  static const unsigned char expect[33] = {
    0x02, 0x1a, 0xb3, 0x49, 0x34, 0xb8, 0x11, 0xb5,
    0x5e, 0x2f, 0xa4, 0xf1, 0xcd, 0x57, 0xf1, 0x68,
    0x51, 0x3d, 0x04, 0xb9, 0x45, 0xb0, 0x43, 0xec,
    0xe9, 0x6b, 0x25, 0x53, 0x96, 0x72, 0xff, 0x52,
    0x03
  };

  printf("  - Testing wei_mul_g (P256).\n");

  test_wei_mul_g(WEI_CURVE_P256, scalar, expect, NULL);
  test_wei_mul_g(WEI_CURVE_P256, scalar, expect, rng);
}

static void
test_wei_mul_p256(drbg_t *unused) {
  static const unsigned char point[33] = {
    0x03, 0x42, 0x67, 0xab, 0xc7, 0xde, 0x72, 0x0f,
    0x14, 0x5a, 0xbc, 0x94, 0xb9, 0x5b, 0x33, 0x50,
    0x7a, 0x37, 0x55, 0x55, 0x2b, 0xef, 0xaf, 0x57,
    0x61, 0x33, 0x7a, 0xd6, 0x7a, 0x28, 0xa9, 0x08,
    0xa1
  };

  static const unsigned char scalar[32] = {
    0xfd, 0x37, 0xfe, 0xab, 0xd9, 0xdd, 0x8d, 0xe5,
    0xfd, 0x04, 0x79, 0xf4, 0xd6, 0xea, 0xd4, 0xe6,
    0x02, 0xc7, 0x06, 0x0f, 0x43, 0x6e, 0x2b, 0xf1,
    0xc0, 0x72, 0xe9, 0x91, 0x80, 0xcb, 0x09, 0x18
  };

  static const unsigned char expect[33] = {
    0x02, 0x93, 0xa3, 0x55, 0xe4, 0x8f, 0x3b, 0x74,
    0xcc, 0x3b, 0xcb, 0xb4, 0x6c, 0xb2, 0x84, 0x3a,
    0xd5, 0x4e, 0xe5, 0xe0, 0x45, 0xe9, 0x17, 0x0b,
    0x00, 0x45, 0xbc, 0xc2, 0x86, 0x68, 0x8c, 0x4d,
    0x56
  };

  (void)unused;

  printf("  - Testing wei_mul (P256).\n");

  test_wei_mul(WEI_CURVE_P256, point, scalar, expect);
}

static void
test_wei_double_mul_p256(drbg_t *unused) {
  static const unsigned char point[33] = {
    0x02, 0x65, 0x26, 0x45, 0xad, 0x1a, 0x36, 0x8c,
    0xdc, 0xcf, 0x81, 0x90, 0x56, 0x3b, 0x2a, 0x12,
    0xba, 0x31, 0xea, 0x33, 0x78, 0xc2, 0x23, 0x66,
    0xff, 0xf8, 0x47, 0x92, 0x63, 0x8c, 0xb8, 0xc8,
    0x94
  };

  static const unsigned char scalar1[32] = {
    0x5f, 0xd3, 0x7e, 0x3c, 0x67, 0x9e, 0xc5, 0xd0,
    0x2b, 0xb6, 0x6a, 0xa8, 0x6e, 0x56, 0xd6, 0x40,
    0x65, 0xe9, 0x47, 0x74, 0x4e, 0x50, 0xee, 0xec,
    0x80, 0xcf, 0xcc, 0xce, 0x3b, 0xd2, 0xf2, 0x1a
  };

  static const unsigned char scalar2[32] = {
    0xfb, 0x15, 0x9a, 0x7d, 0x37, 0x4d, 0x24, 0xde,
    0xde, 0x0a, 0x55, 0xb2, 0x98, 0x26, 0xe3, 0x24,
    0xf6, 0xf1, 0xd7, 0x57, 0x36, 0x53, 0xd7, 0x8a,
    0x98, 0xed, 0xa2, 0x80, 0x6d, 0xbe, 0x37, 0x98
  };

  static const unsigned char expect[33] = {
    0x02, 0x96, 0xf1, 0xb9, 0xe3, 0xe7, 0x0b, 0xa1,
    0x2e, 0xaf, 0x40, 0x23, 0x05, 0x64, 0x5b, 0x0f,
    0x28, 0x1b, 0xec, 0x25, 0x4f, 0xf2, 0x31, 0x8f,
    0x96, 0x9c, 0x97, 0x96, 0x0c, 0x35, 0x0b, 0x2c,
    0x6d
  };

  (void)unused;

  printf("  - Testing wei_mul_double_var (P256).\n");

  test_wei_double_mul(WEI_CURVE_P256, point, scalar1, scalar2, expect);
}

static void
test_wei_multi_mul_p256(drbg_t *unused) {
  static const unsigned char point1[33] = {
    0x02, 0x2b, 0xbf, 0x66, 0x0c, 0x19, 0x5a, 0xea,
    0x82, 0x82, 0x2d, 0x2e, 0x69, 0xc4, 0x02, 0x6e,
    0x57, 0x9a, 0x00, 0xbe, 0xac, 0xc8, 0xa5, 0x7d,
    0x73, 0xb7, 0x3c, 0x76, 0x7c, 0x0c, 0xdc, 0x12,
    0x2d
  };

  static const unsigned char point2[33] = {
    0x03, 0x5e, 0x8e, 0x2b, 0xd9, 0x9b, 0x58, 0x2f,
    0x88, 0xcd, 0x11, 0xeb, 0x27, 0x85, 0x17, 0x71,
    0x2a, 0x09, 0x14, 0x7a, 0x5b, 0x3d, 0x97, 0xbb,
    0x10, 0x4b, 0x03, 0x47, 0x42, 0x78, 0x94, 0xde,
    0xff
  };

  static const unsigned char scalar1[32] = {
    0x7e, 0x7b, 0x6a, 0x4b, 0x5b, 0x57, 0xce, 0x1e,
    0xb4, 0x68, 0x69, 0x87, 0x76, 0x63, 0xb6, 0xdc,
    0xee, 0xb7, 0x0c, 0xba, 0xa5, 0x43, 0xab, 0x87,
    0x50, 0xd5, 0x0a, 0xf7, 0x3f, 0x21, 0xa1, 0x70
  };

  static const unsigned char scalar2[32] = {
    0x31, 0x73, 0xf8, 0x6d, 0xa3, 0xd4, 0x5e, 0xe1,
    0x17, 0x7a, 0xd9, 0xde, 0x61, 0x92, 0x51, 0xa4,
    0xf7, 0x7d, 0xbf, 0x39, 0x92, 0x7f, 0x56, 0xbb,
    0x67, 0x56, 0x8c, 0xd5, 0xab, 0xc9, 0x78, 0xc9
  };

  static const unsigned char scalar3[32] = {
    0x91, 0x58, 0x61, 0x18, 0x94, 0xb5, 0xb6, 0xea,
    0x63, 0x57, 0xf0, 0xd4, 0x24, 0x36, 0x58, 0x68,
    0x86, 0x09, 0x5f, 0x51, 0xe3, 0x18, 0xaf, 0x70,
    0x40, 0x6e, 0xfc, 0xa3, 0xa0, 0x63, 0x80, 0xb9
  };

  static const unsigned char expect[33] = {
    0x03, 0x70, 0x76, 0xa3, 0x4c, 0x39, 0xff, 0xe2,
    0x19, 0xfa, 0x48, 0xdf, 0xb1, 0xfd, 0x19, 0xa0,
    0x6a, 0x94, 0xa3, 0xe5, 0xc6, 0x12, 0xd7, 0xf9,
    0xee, 0x19, 0xba, 0x05, 0x0e, 0x9d, 0x20, 0x0d,
    0x79
  };

  (void)unused;

  printf("  - Testing wei_mul_multi_var (P256).\n");

  test_wei_multi_mul(WEI_CURVE_P256, point1, point2,
                                     scalar1, scalar2,
                                     scalar3, expect);
}

static void
test_wei_mul_g_secp256k1(drbg_t *rng) {
  static const unsigned char scalar[32] = {
    0xf7, 0x6c, 0xd0, 0xed, 0xfb, 0x89, 0x7f, 0x39,
    0xf6, 0x3e, 0x2c, 0x16, 0xc5, 0x73, 0x81, 0xb7,
    0x23, 0x5a, 0x1c, 0x5c, 0xe7, 0x8a, 0xab, 0xf2,
    0xbd, 0x88, 0xb0, 0xd2, 0xb2, 0x5d, 0xf8, 0x52
  };

  static const unsigned char expect[33] = {
    0x03, 0x44, 0x81, 0x79, 0xe0, 0x0a, 0xb1, 0xbf,
    0x6f, 0x33, 0x92, 0xeb, 0x3c, 0xdb, 0xe0, 0xff,
    0xbc, 0x69, 0x40, 0xd0, 0x0d, 0x72, 0x0d, 0xcd,
    0x1a, 0xc7, 0x80, 0xab, 0x95, 0xb0, 0xe2, 0xab,
    0x82
  };

  printf("  - Testing wei_mul_g (SECP256K1).\n");

  test_wei_mul_g(WEI_CURVE_SECP256K1, scalar, expect, NULL);
  test_wei_mul_g(WEI_CURVE_SECP256K1, scalar, expect, rng);
}

static void
test_wei_mul_secp256k1(drbg_t *unused) {
  static const unsigned char point[33] = {
    0x02, 0x0a, 0xfc, 0xf3, 0x56, 0xdb, 0x98, 0x4f,
    0xa0, 0x33, 0x98, 0x35, 0xfe, 0xb4, 0xd9, 0x65,
    0x15, 0x82, 0xee, 0xdf, 0x7a, 0x90, 0x46, 0xa1,
    0x24, 0x85, 0xf5, 0x48, 0xec, 0x75, 0x6f, 0x1a,
    0xe1
  };

  static const unsigned char scalar[32] = {
    0x86, 0xdc, 0xca, 0x82, 0x3e, 0xab, 0x1e, 0x30,
    0x65, 0xbb, 0xe2, 0x58, 0xce, 0xd4, 0xb3, 0x17,
    0xe5, 0x5c, 0x8a, 0x9e, 0x9d, 0x4e, 0xb1, 0x5c,
    0x3e, 0x6e, 0x06, 0xe4, 0x19, 0xf7, 0xcb, 0x15
  };

  static const unsigned char expect[33] = {
    0x02, 0xe4, 0xbe, 0xe4, 0x40, 0xb7, 0xa4, 0x75,
    0xb6, 0x8c, 0x82, 0x1a, 0xbd, 0x37, 0x3d, 0x29,
    0x05, 0xd5, 0xb2, 0x52, 0x66, 0xdd, 0x68, 0x4a,
    0xe0, 0x6f, 0x31, 0xb1, 0x6e, 0x15, 0x7c, 0xaf,
    0xd2
  };

  (void)unused;

  printf("  - Testing wei_mul (SECP256K1).\n");

  test_wei_mul(WEI_CURVE_SECP256K1, point, scalar, expect);
}

static void
test_wei_double_mul_secp256k1(drbg_t *unused) {
  static const unsigned char point[33] = {
    0x02, 0x08, 0x0d, 0x86, 0xe7, 0x20, 0x89, 0x5f,
    0xde, 0x96, 0x2c, 0x69, 0x75, 0xff, 0x3a, 0x34,
    0x32, 0x0f, 0x3c, 0x33, 0x56, 0x25, 0x79, 0x9a,
    0xd6, 0x47, 0xf3, 0x7f, 0x2d, 0xe5, 0x2f, 0x53,
    0x36
  };

  static const unsigned char scalar1[32] = {
    0x54, 0x69, 0xaf, 0x11, 0xd5, 0x5d, 0xe5, 0x4e,
    0x35, 0xef, 0xaa, 0x84, 0xbb, 0x2c, 0xe7, 0xa8,
    0xac, 0xce, 0xb4, 0xe3, 0x74, 0x79, 0xd6, 0xdd,
    0xea, 0x7a, 0xf6, 0x13, 0x0d, 0x2d, 0x2a, 0x0b
  };

  static const unsigned char scalar2[32] = {
    0x21, 0x6d, 0x1f, 0xc1, 0xe2, 0x3a, 0x4c, 0xae,
    0x2f, 0x35, 0xda, 0xff, 0x69, 0xb0, 0x15, 0x2b,
    0x66, 0x11, 0x46, 0xa2, 0x2e, 0x82, 0xb7, 0x81,
    0xb5, 0xd0, 0x30, 0xef, 0xb1, 0xdd, 0xa1, 0x0b
  };

  static const unsigned char expect[33] = {
    0x03, 0x80, 0x2c, 0x75, 0x2d, 0x04, 0xea, 0x64,
    0x0b, 0x6a, 0x8e, 0x8d, 0x11, 0x82, 0x08, 0x9c,
    0xc3, 0x12, 0x14, 0xd2, 0xc5, 0x07, 0xc0, 0xac,
    0x70, 0x11, 0x21, 0x46, 0x1d, 0x42, 0xb1, 0x73,
    0x12
  };

  (void)unused;

  printf("  - Testing wei_mul_double_var (SECP256K1).\n");

  test_wei_double_mul(WEI_CURVE_SECP256K1, point, scalar1, scalar2, expect);
}

static void
test_wei_multi_mul_secp256k1(drbg_t *unused) {
  static const unsigned char point1[33] = {
    0x03, 0x4a, 0x9a, 0xd8, 0x9a, 0x7e, 0xef, 0x6b,
    0xbb, 0xb5, 0x10, 0xeb, 0x3b, 0x04, 0xa8, 0x6d,
    0xa7, 0x39, 0xfa, 0xf1, 0xea, 0xf0, 0xfc, 0x9f,
    0xef, 0x50, 0x36, 0x9f, 0x06, 0x3f, 0xae, 0x07,
    0xd4
  };

  static const unsigned char point2[33] = {
    0x03, 0xe8, 0x61, 0x6f, 0x91, 0x4f, 0x18, 0x4e,
    0xdd, 0x67, 0xe4, 0x9b, 0xeb, 0x03, 0x53, 0xb9,
    0x9c, 0x49, 0x82, 0x9c, 0xc9, 0x5b, 0x6e, 0x1e,
    0xb4, 0xa2, 0xc3, 0x7c, 0x67, 0x31, 0x02, 0x42,
    0xde
  };

  static const unsigned char scalar1[32] = {
    0x36, 0x1e, 0x23, 0xcb, 0x88, 0x78, 0x10, 0x7e,
    0xa5, 0xf7, 0xaf, 0xc6, 0xd6, 0x69, 0x47, 0xa9,
    0x0a, 0x56, 0x3b, 0x67, 0x2f, 0x13, 0xb2, 0x5c,
    0x89, 0x98, 0xec, 0x6c, 0xa1, 0x7d, 0xc6, 0xd2
  };

  static const unsigned char scalar2[32] = {
    0x66, 0x84, 0x8d, 0x52, 0xb2, 0x58, 0xfe, 0xe1,
    0xf2, 0xa5, 0xd7, 0x44, 0x0e, 0xd4, 0x40, 0x7a,
    0x04, 0x4e, 0xde, 0x94, 0xd2, 0x69, 0x2e, 0xd7,
    0x7d, 0x6b, 0x0d, 0x22, 0x1e, 0x0a, 0x98, 0x07
  };

  static const unsigned char scalar3[32] = {
    0xcc, 0x21, 0x46, 0x94, 0x47, 0x1a, 0x81, 0xae,
    0xe8, 0xa5, 0x5a, 0x3a, 0x8b, 0x2b, 0x6f, 0xa5,
    0x34, 0x65, 0x68, 0xd5, 0xee, 0xd2, 0x63, 0x2e,
    0x82, 0xcb, 0x7e, 0xf2, 0xb1, 0x96, 0x15, 0x29
  };

  static const unsigned char expect[33] = {
    0x03, 0xbc, 0xc1, 0x34, 0x04, 0xd2, 0x3e, 0x37,
    0x33, 0x7f, 0x15, 0xfe, 0xf0, 0x1d, 0xb4, 0xe1,
    0x31, 0xca, 0x1c, 0x0d, 0x14, 0x42, 0x3d, 0xbd,
    0x2e, 0xff, 0x72, 0xda, 0xd5, 0x60, 0xcb, 0xad,
    0xd6
  };

  (void)unused;

  printf("  - Testing wei_mul_multi_var (SECP256K1).\n");

  test_wei_multi_mul(WEI_CURVE_SECP256K1, point1, point2,
                                          scalar1, scalar2,
                                          scalar3, expect);
}

/*
 * Montgomery
 */

static void
test_mont_points(int type,
                 const unsigned char points[3][1 + MAX_FIELD_SIZE],
                 drbg_t *rng) {
  mont_t *ec = mont_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  pge_t jo, jg, jp, jq, jr;
  mge_t o, g, p, q, r;
  mge_t mg, mq, mr;
  unsigned int i;
  sc_t k, z;

  /*
   * Assignment
   */

  sc_set_word(sc, k, 3);
  sc_zero(sc, z);

  mge_zero(ec, &o);
  mge_set(ec, &g, &ec->g);

  /*
   * Import
   */

  ASSERT(mge_import(ec, &p, points[0] + 1, *points[0]));
  ASSERT(mge_import(ec, &q, points[1] + 1, *points[1]));
  ASSERT(mge_import(ec, &r, points[2] + 1, *points[2]));

  /*
   * Conversion
   */

  pge_set_mge(ec, &jo, &o);
  pge_set_mge(ec, &jg, &g);
  pge_set_mge(ec, &jp, &p);
  pge_set_mge(ec, &jq, &q);
  pge_set_mge(ec, &jr, &r);

  pge_randomize(ec, &jg, &jg, rng);
  pge_randomize(ec, &jp, &jp, rng);
  pge_randomize(ec, &jq, &jq, rng);
  pge_randomize(ec, &jr, &jr, rng);

  /*
   * Validation
   */

  ASSERT(mge_validate(ec, &o));
  ASSERT(mge_validate(ec, &g));
  ASSERT(mge_validate(ec, &p));
  ASSERT(mge_validate(ec, &q));
  ASSERT(mge_validate(ec, &r));
  ASSERT(pge_validate(ec, &jo));
  ASSERT(pge_validate(ec, &jg));
  ASSERT(pge_validate(ec, &jp));
  ASSERT(pge_validate(ec, &jq));
  ASSERT(pge_validate(ec, &jr));

  /*
   * Equality (sanity check)
   */

  ASSERT(mge_equal(ec, &p, &g));
  ASSERT(!mge_equal(ec, &p, &q));
  ASSERT(!mge_equal(ec, &p, &o));
  ASSERT(!mge_is_zero(ec, &p));

  ASSERT(pge_equal(ec, &jp, &jg));
  ASSERT(!pge_equal(ec, &jp, &jq));
  ASSERT(!pge_equal(ec, &jp, &jo));
  ASSERT(!pge_is_zero(ec, &jp));

  /*
   * Affine Negation
   */

  mge_neg(ec, &mg, &g);
  mge_neg(ec, &mq, &q);
  mge_neg(ec, &mr, &r);

  /*
   * Affine
   */

  /* Addition */
  mge_add(ec, &p, &o, &o); ASSERT(mge_is_zero(ec, &p));
  mge_add(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &g));
  mge_add(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &q));
  mge_add(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &r));
  mge_add(ec, &p, &p, &o); ASSERT(mge_equal(ec, &p, &r));

  /* Subtraction */
  mge_sub(ec, &p, &p, &o); ASSERT(mge_equal(ec, &p, &r));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &q));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &g));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_is_zero(ec, &p));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &mg));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &mq));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &mr));

  /* Addition (swapped argument order) */
  mge_add(ec, &p, &o, &o); ASSERT(mge_is_zero(ec, &p));
  mge_add(ec, &p, &g, &p); ASSERT(mge_equal(ec, &p, &g));
  mge_add(ec, &p, &g, &p); ASSERT(mge_equal(ec, &p, &q));
  mge_add(ec, &p, &g, &p); ASSERT(mge_equal(ec, &p, &r));
  mge_add(ec, &p, &o, &p); ASSERT(mge_equal(ec, &p, &r));

  /* Addition / Subtraction (same point) */
  mge_set(ec, &p, &g); ASSERT(mge_equal(ec, &p, &g));
  mge_add(ec, &p, &p, &p); ASSERT(mge_equal(ec, &p, &q));
  mge_sub(ec, &p, &p, &p); ASSERT(mge_is_zero(ec, &p));

  /* Addition (with explicit doubling) */
  mge_dbl(ec, &p, &o); ASSERT(mge_is_zero(ec, &p));
  mge_dbl(ec, &p, &g); ASSERT(mge_equal(ec, &p, &q));
  mge_add(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &r));

  /* Subtraction (with explicit doubling) */
  mge_sub(ec, &p, &o, &g); ASSERT(mge_equal(ec, &p, &mg));
  mge_dbl(ec, &p, &p); ASSERT(mge_equal(ec, &p, &mq));
  mge_sub(ec, &p, &p, &g); ASSERT(mge_equal(ec, &p, &mr));

  /*
   * Projective
   */

  /* Addition (with explicit doubling) */
  pge_dbl(ec, &jp, &jo); ASSERT(pge_is_zero(ec, &jp));
  pge_dbl(ec, &jp, &jg); ASSERT(pge_equal(ec, &jp, &jq));

  /* Multiplication */
  mont_mul_g(ec, &jp, z); ASSERT(pge_equal(ec, &jp, &jo));
  mont_mul_g(ec, &jp, k); ASSERT(pge_equal(ec, &jp, &jr));
  mont_mul(ec, &jp, &jo, k, 0); ASSERT(pge_is_zero(ec, &jo));
  mont_mul(ec, &jp, &jg, k, 0); ASSERT(pge_equal(ec, &jp, &jr));
  pge_normalize(ec, &jg, &jg);
  mont_mul(ec, &jp, &jg, k, 1); ASSERT(pge_equal(ec, &jp, &jr));

  /*
   * Torsion
   */

  ASSERT(!pge_is_small(ec, &jg));
  ASSERT(!pge_has_torsion(ec, &jg));

  for (i = 1; i < ec->h; i++) {
    pge_set_mge(ec, &jp, &ec->torsion[i]);

    ASSERT(pge_is_small(ec, &jp));

    pge_mulh(ec, &jp, &jp);

    ASSERT(!pge_is_small(ec, &jp));
    ASSERT(pge_is_zero(ec, &jp));

    mge_add(ec, &p, &g, &ec->torsion[i]);
    pge_set_mge(ec, &jp, &p);

    ASSERT(!pge_is_small(ec, &jp));
    ASSERT(pge_has_torsion(ec, &jp));

    pge_mulh(ec, &jp, &jp);

    ASSERT(!pge_has_torsion(ec, &jp));
  }

  /*
   * Normalization / Export
   */

  mge_set_pge(ec, &p, &jr, *points[2]);

  ASSERT(!mge_is_zero(ec, &p));
  ASSERT(mge_equal(ec, &p, &r));
  ASSERT(mge_equal_raw(ec, &p, points[2] + 1));

  /*
   * Cleanup
   */

  mont_curve_destroy(ec);
}

static void
test_mont_mul_g(int type,
                const unsigned char *scalar,
                const unsigned char *expect) {
  mont_t *ec = mont_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  pge_t q, r;
  sc_t k;

  ASSERT(sc_import(sc, k, scalar));
  ASSERT(pge_import(ec, &r, expect));

  mont_mul_g(ec, &q, k);

  ASSERT(pge_equal(ec, &q, &r));
  ASSERT(pge_equal_raw(ec, &q, expect));

  mont_curve_destroy(ec);
}

static void
test_mont_mul(int type,
              const unsigned char *point,
              const unsigned char *scalar,
              const unsigned char *expect,
              int affine) {
  mont_t *ec = mont_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  pge_t p, q, r;
  sc_t k;

  ASSERT(pge_import(ec, &p, point));
  ASSERT(sc_import(sc, k, scalar));
  ASSERT(pge_import(ec, &r, expect));

  mont_mul(ec, &q, &p, k, affine);

  ASSERT(pge_equal(ec, &q, &r));
  ASSERT(pge_equal_raw(ec, &q, expect));

  mont_curve_destroy(ec);
}

static void
test_mont_points_x25519(drbg_t *rng) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    /* G, 2G, 3G */
    {
      0x00,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
      0x00,
      0xfb, 0x4e, 0x68, 0xdd, 0x9c, 0x46, 0xae, 0x5c,
      0x5c, 0x0b, 0x35, 0x1e, 0xed, 0x5c, 0x3f, 0x8f,
      0x14, 0x71, 0x15, 0x7d, 0x68, 0x0c, 0x75, 0xd9,
      0xb7, 0xf1, 0x73, 0x18, 0xd5, 0x42, 0xd3, 0x20
    },
    {
      0x00,
      0x12, 0x3c, 0x71, 0xfb, 0xaf, 0x03, 0x0a, 0xc0,
      0x59, 0x08, 0x1c, 0x62, 0x67, 0x4e, 0x82, 0xf8,
      0x64, 0xba, 0x1b, 0xc2, 0x91, 0x4d, 0x53, 0x45,
      0xe6, 0xab, 0x57, 0x6d, 0x1a, 0xbc, 0x12, 0x1c
    }
  };

  printf("  - Testing Montgomery group law (X25519).\n");

  test_mont_points(MONT_CURVE_X25519, points, rng);
}

static void
test_mont_mul_g_x25519(drbg_t *unused) {
  static const unsigned char scalar[32] = {
    0xc0, 0x10, 0xc9, 0x33, 0xed, 0xe8, 0x73, 0x6d,
    0x16, 0x1c, 0x0b, 0x6d, 0x74, 0x89, 0xfb, 0xe1,
    0xdc, 0xd6, 0x32, 0x60, 0x4b, 0xdb, 0x8f, 0x8c,
    0x6f, 0x90, 0x4d, 0xc8, 0xb6, 0xf5, 0x26, 0x0d
  };

  static const unsigned char expect[32] = {
    0x5c, 0x4d, 0x22, 0x69, 0xdc, 0xfb, 0xb7, 0xd2,
    0x61, 0x11, 0xd0, 0x9a, 0x83, 0xe8, 0x6c, 0x80,
    0xc6, 0xa5, 0x3a, 0xa9, 0x28, 0x6a, 0xfb, 0xe2,
    0xa3, 0xa0, 0xd2, 0x89, 0x85, 0xf0, 0x64, 0x29
  };

  (void)unused;

  printf("  - Testing mont_mul_g (X25519).\n");

  test_mont_mul_g(MONT_CURVE_X25519, scalar, expect);
}

static void
test_mont_mul_x25519(drbg_t *unused) {
  static const unsigned char point[32] = {
    0x6c, 0xd0, 0xd5, 0x70, 0xf8, 0x8b, 0xe0, 0x1b,
    0xb7, 0x0d, 0xd2, 0x62, 0xaf, 0x7a, 0x58, 0x52,
    0xdb, 0xf1, 0x6d, 0x4f, 0xb9, 0x23, 0xaf, 0xaa,
    0x9a, 0x64, 0x0f, 0x8a, 0x50, 0x03, 0x47, 0x25
  };

  static const unsigned char scalar[32] = {
    0x8c, 0x20, 0xa0, 0x92, 0xe2, 0x32, 0xd8, 0x9c,
    0x81, 0x39, 0xdd, 0x1f, 0x4f, 0x2e, 0x7a, 0x33,
    0x3e, 0x45, 0x8a, 0x52, 0x64, 0xad, 0xa4, 0x9a,
    0xa5, 0x9a, 0x7d, 0xf3, 0x7d, 0x01, 0xe8, 0x02
  };

  static const unsigned char expect[32] = {
    0x81, 0x97, 0x80, 0x71, 0xaa, 0xc0, 0xb8, 0xaa,
    0x6e, 0xf3, 0x8d, 0x96, 0xc7, 0x92, 0xcc, 0x04,
    0xea, 0x69, 0x90, 0x6f, 0x6e, 0x13, 0x13, 0x5d,
    0xcf, 0xf5, 0x0c, 0xdb, 0x73, 0x52, 0xb9, 0x7e
  };

  (void)unused;

  printf("  - Testing mont_mul (X25519).\n");

  test_mont_mul(MONT_CURVE_X25519, point, scalar, expect, 0);
  test_mont_mul(MONT_CURVE_X25519, point, scalar, expect, 1);
}

static void
test_mont_points_x448(drbg_t *rng) {
  static const unsigned char points[3][1 + MAX_FIELD_SIZE] = {
    /* G, 2G, 3G */
    {
      0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
      0x00,
      0xb6, 0x3c, 0x74, 0x1c, 0xbc, 0xa4, 0x32, 0x7d,
      0x08, 0x08, 0x12, 0x5a, 0x25, 0xf0, 0xe8, 0x25,
      0x71, 0xed, 0x00, 0xda, 0xf1, 0x47, 0x37, 0xbf,
      0xc1, 0x6f, 0x26, 0x16, 0x66, 0x76, 0x3c, 0x5f,
      0xd7, 0x83, 0x1e, 0x51, 0xfb, 0xbe, 0x9a, 0xac,
      0xcc, 0x5c, 0xbd, 0xd8, 0x65, 0x46, 0xef, 0x9a,
      0xd4, 0xe3, 0xca, 0x57, 0x22, 0x32, 0x91, 0x63
    },
    {
      0x01,
      0x4c, 0xf3, 0x53, 0x05, 0x4d, 0x31, 0xe3, 0x11,
      0x75, 0x1c, 0x32, 0xd0, 0x13, 0x7d, 0x9a, 0xce,
      0x52, 0x56, 0xf9, 0x9b, 0xa5, 0x8e, 0x13, 0x63,
      0xea, 0xe7, 0xa4, 0x07, 0x28, 0x2a, 0x00, 0x2c,
      0x49, 0x42, 0x3c, 0xb9, 0x1f, 0xb6, 0x29, 0x24,
      0x8a, 0x0b, 0x84, 0x25, 0x93, 0x4b, 0xc1, 0x70,
      0x61, 0xb8, 0xca, 0x84, 0x35, 0x4b, 0xbe, 0x1f
    }
  };

  printf("  - Testing Montgomery group law (X448).\n");

  test_mont_points(MONT_CURVE_X448, points, rng);
}

static void
test_mont_mul_g_x448(drbg_t *unused) {
  static const unsigned char scalar[56] = {
    0xba, 0x13, 0x20, 0x3a, 0x42, 0xa9, 0x2e, 0x11,
    0x78, 0x99, 0x6e, 0xe1, 0x9d, 0x47, 0x64, 0xaa,
    0x60, 0x6d, 0xc4, 0xbf, 0xd1, 0x66, 0xcc, 0x95,
    0x3d, 0xed, 0x54, 0x6b, 0x38, 0xfa, 0xbb, 0x62,
    0x1e, 0x58, 0x4e, 0x43, 0x80, 0x3c, 0x9d, 0x39,
    0x35, 0x95, 0x1d, 0x73, 0x12, 0x4e, 0xc4, 0x92,
    0xb8, 0x8e, 0xd7, 0xaf, 0x5e, 0x6c, 0x18, 0x36
  };

  static const unsigned char expect[56] = {
    0xfd, 0xb3, 0x5d, 0xde, 0xa1, 0xcc, 0x4c, 0x11,
    0x0d, 0x10, 0x30, 0x87, 0x91, 0x1f, 0x79, 0x21,
    0xa2, 0xde, 0x3f, 0x0e, 0xfc, 0x8e, 0x25, 0x22,
    0xd8, 0x62, 0xf3, 0xba, 0x3a, 0x46, 0x97, 0x6b,
    0xb1, 0xfd, 0xf1, 0x42, 0x6f, 0x04, 0xb0, 0x5c,
    0x4f, 0xcf, 0x94, 0xf6, 0x30, 0x83, 0x0f, 0xaf,
    0xec, 0x99, 0x3d, 0x7f, 0xa9, 0x0b, 0x71, 0x01
  };

  (void)unused;

  printf("  - Testing mont_mul_g (X448).\n");

  test_mont_mul_g(MONT_CURVE_X448, scalar, expect);
}

static void
test_mont_mul_x448(drbg_t *unused) {
  static const unsigned char point[56] = {
    0xef, 0x79, 0x8e, 0xe7, 0x7c, 0xda, 0x2a, 0x13,
    0xf3, 0xb5, 0xf4, 0xde, 0x07, 0xd4, 0x00, 0x60,
    0xf4, 0x52, 0x24, 0x82, 0xcd, 0x86, 0x9f, 0x2b,
    0xed, 0x90, 0x1d, 0xdc, 0x45, 0xc2, 0xd9, 0x8c,
    0xe1, 0x23, 0x31, 0x8d, 0xa2, 0xf4, 0x33, 0x9a,
    0x85, 0xaf, 0x4f, 0x07, 0x4b, 0x64, 0xa9, 0x2c,
    0x66, 0xee, 0x71, 0x8c, 0x02, 0x96, 0x33, 0x3e
  };

  static const unsigned char scalar[56] = {
    0x1a, 0x15, 0xd1, 0xcd, 0xcd, 0x9c, 0x3b, 0x81,
    0x74, 0x15, 0xea, 0xe3, 0x65, 0xcc, 0x0c, 0x20,
    0xfa, 0xf3, 0x85, 0xc5, 0x30, 0x54, 0xc0, 0x6d,
    0x3d, 0x9e, 0x9e, 0x7d, 0x2c, 0x80, 0x54, 0xc8,
    0x58, 0x34, 0x78, 0xc1, 0x22, 0xbd, 0x3a, 0xeb,
    0xf8, 0xfb, 0xba, 0x70, 0xf3, 0xb0, 0x85, 0x82,
    0x57, 0x75, 0x34, 0x83, 0xed, 0x90, 0x6d, 0x27
  };

  static const unsigned char expect[56] = {
    0xdc, 0x6f, 0x75, 0xd2, 0x2d, 0x1a, 0xe5, 0xdf,
    0x3d, 0x95, 0x7b, 0xda, 0x18, 0xab, 0x7c, 0xd6,
    0xfa, 0x70, 0xc4, 0xbf, 0x61, 0x55, 0x68, 0x03,
    0xba, 0x9c, 0x54, 0x77, 0x83, 0x17, 0x78, 0xaf,
    0x2d, 0x1c, 0x71, 0x04, 0x10, 0xb3, 0xf7, 0x21,
    0x7a, 0x8a, 0x92, 0x9e, 0xab, 0x25, 0x80, 0xc2,
    0x2d, 0x01, 0xe5, 0xdd, 0x22, 0x2e, 0x05, 0x49
  };

  (void)unused;

  printf("  - Testing mont_mul (X448).\n");

  test_mont_mul(MONT_CURVE_X448, point, scalar, expect, 0);
  test_mont_mul(MONT_CURVE_X448, point, scalar, expect, 1);
}

/*
 * Edwards
 */

static void
test_edwards_points(int type,
                    const unsigned char points[3][MAX_FIELD_SIZE + 1],
                    drbg_t *rng) {
  edwards_t *ec = edwards_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  xge_t o, g, p, q, r;
  xge_t mg, mq, mr;
  unsigned int i;
  sc_t k, z;

  /*
   * Assignment
   */

  sc_set_word(sc, k, 3);
  sc_zero(sc, z);

  xge_zero(ec, &o);
  xge_set(ec, &g, &ec->g);

  /*
   * Import
   */

  ASSERT(xge_import(ec, &p, points[0]));
  ASSERT(xge_import(ec, &q, points[1]));
  ASSERT(xge_import(ec, &r, points[2]));

  /*
   * Randomization
   */

  xge_randomize(ec, &o, &o, rng);
  xge_randomize(ec, &g, &g, rng);
  xge_randomize(ec, &p, &p, rng);
  xge_randomize(ec, &q, &q, rng);
  xge_randomize(ec, &r, &r, rng);

  /*
   * Validation
   */

  ASSERT(xge_validate(ec, &o));
  ASSERT(xge_validate(ec, &g));
  ASSERT(xge_validate(ec, &p));
  ASSERT(xge_validate(ec, &q));
  ASSERT(xge_validate(ec, &r));

  /*
   * Equality (sanity check)
   */

  ASSERT(xge_equal(ec, &p, &g));
  ASSERT(!xge_equal(ec, &p, &q));
  ASSERT(!xge_equal(ec, &p, &o));
  ASSERT(!xge_is_zero(ec, &p));

  /*
   * Affine Negation
   */

  xge_neg(ec, &mg, &g);
  xge_neg(ec, &mq, &q);
  xge_neg(ec, &mr, &r);

  /*
   * Arithmetic
   */

  /* Addition */
  xge_add(ec, &p, &o, &o); ASSERT(xge_is_zero(ec, &p));
  xge_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &g));
  xge_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &r));
  xge_add(ec, &p, &p, &o); ASSERT(xge_equal(ec, &p, &r));

  /* Subtraction */
  xge_sub(ec, &p, &p, &o); ASSERT(xge_equal(ec, &p, &r));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &g));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_is_zero(ec, &p));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mg));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mq));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mr));

  /* Addition (swapped argument order) */
  xge_add(ec, &p, &o, &o); ASSERT(xge_is_zero(ec, &p));
  xge_add(ec, &p, &g, &p); ASSERT(xge_equal(ec, &p, &g));
  xge_add(ec, &p, &g, &p); ASSERT(xge_equal(ec, &p, &q));
  xge_add(ec, &p, &g, &p); ASSERT(xge_equal(ec, &p, &r));
  xge_add(ec, &p, &o, &p); ASSERT(xge_equal(ec, &p, &r));

  /* Addition / Subtraction (same point) */
  xge_set(ec, &p, &g); ASSERT(xge_equal(ec, &p, &g));
  xge_add(ec, &p, &p, &p); ASSERT(xge_equal(ec, &p, &q));
  xge_sub(ec, &p, &p, &p); ASSERT(xge_is_zero(ec, &p));

  /* Addition (with explicit doubling) */
  xge_dbl(ec, &p, &o); ASSERT(xge_is_zero(ec, &p));
  xge_dbl(ec, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &r));

  /* Subtraction (with explicit doubling) */
  xge_sub(ec, &p, &o, &g); ASSERT(xge_equal(ec, &p, &mg));
  xge_dbl(ec, &p, &p); ASSERT(xge_equal(ec, &p, &mq));
  xge_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mr));

  /* Multiplication */
  edwards_mul_double_var(ec, &p, k, &o, z); ASSERT(xge_equal(ec, &p, &r));
  edwards_mul_double_var(ec, &p, z, &g, k); ASSERT(xge_equal(ec, &p, &r));
  edwards_mul_double_var(ec, &p, k, &mg, k); ASSERT(xge_equal(ec, &p, &o));
  edwards_mul_g(ec, &p, k); ASSERT(xge_equal(ec, &p, &r));
  edwards_mul(ec, &p, &g, k); ASSERT(xge_equal(ec, &p, &r));

  /*
   * Arithmetic (mixed)
   */

  xge_normalize(ec, &o, &o);
  xge_normalize(ec, &g, &g);

  /* Addition */
  xge_mixed_add(ec, &p, &o, &o); ASSERT(xge_is_zero(ec, &p));
  xge_mixed_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &g));
  xge_mixed_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_mixed_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &r));
  xge_mixed_add(ec, &p, &p, &o); ASSERT(xge_equal(ec, &p, &r));

  /* Subtraction */
  xge_mixed_sub(ec, &p, &p, &o); ASSERT(xge_equal(ec, &p, &r));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &g));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_is_zero(ec, &p));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mg));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mq));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mr));

  /* Addition (with explicit doubling) */
  xge_dbl(ec, &p, &o); ASSERT(xge_is_zero(ec, &p));
  xge_dbl(ec, &p, &g); ASSERT(xge_equal(ec, &p, &q));
  xge_mixed_add(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &r));

  /* Subtraction (with explicit doubling) */
  xge_mixed_sub(ec, &p, &o, &g); ASSERT(xge_equal(ec, &p, &mg));
  xge_dbl(ec, &p, &p); ASSERT(xge_equal(ec, &p, &mq));
  xge_mixed_sub(ec, &p, &p, &g); ASSERT(xge_equal(ec, &p, &mr));

  xge_randomize(ec, &o, &o, rng);
  xge_randomize(ec, &g, &g, rng);

  /*
   * Torsion
   */

  ASSERT(!xge_is_small(ec, &g));
  ASSERT(!xge_has_torsion(ec, &g));

  for (i = 1; i < ec->h; i++) {
    ASSERT(xge_is_small(ec, &ec->torsion[i]));

    xge_mulh(ec, &p, &ec->torsion[i]);

    ASSERT(!xge_is_small(ec, &p));
    ASSERT(xge_is_zero(ec, &p));

    xge_add(ec, &p, &g, &ec->torsion[i]);

    ASSERT(!xge_is_small(ec, &p));
    ASSERT(xge_has_torsion(ec, &p));

    xge_mulh(ec, &p, &p);

    ASSERT(!xge_has_torsion(ec, &p));
  }

  /*
   * Normalization / Export
   */

  ASSERT(!xge_is_zero(ec, &r));
  ASSERT(xge_equal_raw(ec, &r, points[2]));

  /*
   * Cleanup
   */

  edwards_curve_destroy(ec);
}

static void
test_edwards_mul_g(int type,
                   const unsigned char *scalar,
                   const unsigned char *expect,
                   drbg_t *rng) {
  unsigned char entropy[ENTROPY_SIZE];
  edwards_t *ec = edwards_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  xge_t q, r;
  sc_t k;

  if (rng != NULL) {
    drbg_generate(rng, entropy, sizeof(entropy));
    edwards_randomize(ec, entropy);
  }

  ASSERT(sc_import(sc, k, scalar));
  ASSERT(xge_import(ec, &r, expect));

  edwards_mul_g(ec, &q, k);

  ASSERT(xge_equal(ec, &q, &r));
  ASSERT(xge_equal_raw(ec, &q, expect));

  edwards_curve_destroy(ec);
}

static void
test_edwards_mul(int type,
                 const unsigned char *point,
                 const unsigned char *scalar,
                 const unsigned char *expect) {
  edwards_t *ec = edwards_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  xge_t p, q, r;
  sc_t k;

  ASSERT(xge_import(ec, &p, point));
  ASSERT(sc_import(sc, k, scalar));
  ASSERT(xge_import(ec, &r, expect));

  edwards_mul(ec, &q, &p, k);

  ASSERT(xge_equal(ec, &q, &r));
  ASSERT(xge_equal_raw(ec, &q, expect));

  edwards_curve_destroy(ec);
}

static void
test_edwards_double_mul(int type,
                        const unsigned char *point,
                        const unsigned char *scalar1,
                        const unsigned char *scalar2,
                        const unsigned char *expect) {
  edwards_t *ec = edwards_curve_create(type);
  scalar_field_t *sc = &ec->sc;
  xge_t p, q, r;
  sc_t k1, k2;

  ASSERT(xge_import(ec, &p, point));
  ASSERT(sc_import(sc, k1, scalar1));
  ASSERT(sc_import(sc, k2, scalar2));
  ASSERT(xge_import(ec, &r, expect));

  edwards_mul_double_var(ec, &q, k1, &p, k2);

  ASSERT(xge_equal(ec, &q, &r));
  ASSERT(xge_equal_raw(ec, &q, expect));

  edwards_curve_destroy(ec);
}

static void
test_edwards_multi_mul(int type,
                       const unsigned char *point1,
                       const unsigned char *point2,
                       const unsigned char *scalar1,
                       const unsigned char *scalar2,
                       const unsigned char *scalar3,
                       const unsigned char *expect) {
  edwards_t *ec = edwards_curve_create(type);
  edwards_scratch_t *scratch = edwards_scratch_create(ec, 2);
  scalar_field_t *sc = &ec->sc;
  xge_t p1, p2, q, r;
  sc_t k0, k1, k2;
  xge_t points[2];
  sc_t coeffs[2];

  ASSERT(xge_import(ec, &p1, point1));
  ASSERT(xge_import(ec, &p2, point2));
  ASSERT(sc_import(sc, k0, scalar1));
  ASSERT(sc_import(sc, k1, scalar2));
  ASSERT(sc_import(sc, k2, scalar3));
  ASSERT(xge_import(ec, &r, expect));

  xge_set(ec, &points[0], &p1);
  xge_set(ec, &points[1], &p2);

  sc_set(sc, coeffs[0], k1);
  sc_set(sc, coeffs[1], k2);

  edwards_mul_multi_var(ec, &q, k0, points, (const sc_t *)coeffs, 2, scratch);

  ASSERT(xge_equal(ec, &q, &r));
  ASSERT(xge_equal_raw(ec, &q, expect));

  edwards_scratch_destroy(ec, scratch);
  edwards_curve_destroy(ec);
}

static void
test_edwards_points_ed25519(drbg_t *rng) {
  static const unsigned char points[3][MAX_FIELD_SIZE + 1] = {
    /* G, 2G, 3G */
    {
      0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
    },
    {
      0xc9, 0xa3, 0xf8, 0x6a, 0xae, 0x46, 0x5f, 0x0e,
      0x56, 0x51, 0x38, 0x64, 0x51, 0x0f, 0x39, 0x97,
      0x56, 0x1f, 0xa2, 0xc9, 0xe8, 0x5e, 0xa2, 0x1d,
      0xc2, 0x29, 0x23, 0x09, 0xf3, 0xcd, 0x60, 0x22
    },
    {
      0xd4, 0xb4, 0xf5, 0x78, 0x48, 0x68, 0xc3, 0x02,
      0x04, 0x03, 0x24, 0x67, 0x17, 0xec, 0x16, 0x9f,
      0xf7, 0x9e, 0x26, 0x60, 0x8e, 0xa1, 0x26, 0xa1,
      0xab, 0x69, 0xee, 0x77, 0xd1, 0xb1, 0x67, 0x12
    }
  };

  printf("  - Testing Edwards group law (ED25519).\n");

  test_edwards_points(EDWARDS_CURVE_ED25519, points, rng);
}

static void
test_edwards_mul_g_ed25519(drbg_t *rng) {
  static const unsigned char scalar[32] = {
    0x69, 0x33, 0xe6, 0x67, 0x60, 0xa1, 0x4f, 0x93,
    0xa7, 0x75, 0x24, 0xb9, 0x07, 0xe4, 0x03, 0x75,
    0xf5, 0x4f, 0xd6, 0x0d, 0xec, 0x03, 0x3f, 0x1b,
    0x74, 0xf1, 0x54, 0x6d, 0xf2, 0xd7, 0xe8, 0x09
  };

  static const unsigned char expect[32] = {
    0x3c, 0xcf, 0xe3, 0x87, 0xa1, 0x5e, 0x19, 0x62,
    0x7e, 0xa5, 0x2f, 0x01, 0x3c, 0x42, 0x8e, 0xb3,
    0x50, 0x7c, 0xa8, 0x2f, 0x19, 0x90, 0x61, 0xd2,
    0xcb, 0xe1, 0x07, 0x8f, 0x01, 0x21, 0xaf, 0x21
  };

  printf("  - Testing edwards_mul_g (ED25519).\n");

  test_edwards_mul_g(EDWARDS_CURVE_ED25519, scalar, expect, NULL);
  test_edwards_mul_g(EDWARDS_CURVE_ED25519, scalar, expect, rng);
}

static void
test_edwards_mul_ed25519(drbg_t *unused) {
  static const unsigned char point[32] = {
    0xe1, 0xb0, 0x38, 0x25, 0x32, 0xd6, 0x5a, 0x8f,
    0x8d, 0xb3, 0x9a, 0x07, 0xff, 0x2a, 0x80, 0x9c,
    0x10, 0xbe, 0x39, 0xee, 0xf8, 0x6f, 0x85, 0x3b,
    0x18, 0xcb, 0x8d, 0xff, 0x52, 0x5d, 0x18, 0xea
  };

  static const unsigned char scalar[32] = {
    0x80, 0x41, 0xd8, 0xb0, 0xc9, 0x39, 0x74, 0x5f,
    0xd7, 0x86, 0xa0, 0x39, 0x50, 0x5b, 0x60, 0x14,
    0xf0, 0xa7, 0x2f, 0xf6, 0x54, 0x17, 0x82, 0x50,
    0x02, 0xde, 0x22, 0xae, 0x95, 0xd6, 0x6f, 0x04
  };

  static const unsigned char expect[32] = {
    0xca, 0x61, 0x5f, 0x44, 0xdf, 0xb4, 0xae, 0x00,
    0x53, 0xff, 0x3d, 0xb7, 0x1f, 0x7a, 0xbe, 0xfd,
    0x52, 0xf5, 0x8f, 0x36, 0x2c, 0xd5, 0x7c, 0x04,
    0x68, 0x2a, 0xee, 0xb0, 0x12, 0xec, 0x90, 0xbe
  };

  (void)unused;

  printf("  - Testing edwards_mul (ED25519).\n");

  test_edwards_mul(EDWARDS_CURVE_ED25519, point, scalar, expect);
}

static void
test_edwards_double_mul_ed25519(drbg_t *unused) {
  static const unsigned char point[32] = {
    0x3e, 0x5f, 0x12, 0xb3, 0xec, 0x9e, 0x60, 0x1c,
    0x2b, 0x6c, 0x5b, 0x5b, 0xe6, 0x31, 0x97, 0xc0,
    0xc0, 0xef, 0x70, 0x61, 0x0a, 0xa6, 0x59, 0xef,
    0x1c, 0xdd, 0x6d, 0x0d, 0xac, 0x5b, 0x75, 0x5d
  };

  static const unsigned char scalar1[32] = {
    0xaa, 0x78, 0x33, 0xea, 0x1b, 0x8c, 0xd3, 0x7e,
    0x8c, 0x4b, 0xbc, 0xea, 0x75, 0x88, 0x53, 0x1d,
    0x45, 0x11, 0x5c, 0x03, 0x4f, 0xee, 0xfc, 0x98,
    0x51, 0x54, 0x37, 0x3e, 0xe5, 0x59, 0xe8, 0x03
  };

  static const unsigned char scalar2[32] = {
    0x87, 0xd3, 0x3b, 0x4a, 0x4c, 0x11, 0x08, 0xf2,
    0x2d, 0x6f, 0x53, 0xd5, 0xfd, 0x7a, 0x14, 0x8e,
    0xc3, 0x68, 0x63, 0x6d, 0xc1, 0x80, 0x0d, 0xd9,
    0x28, 0xd7, 0x05, 0x49, 0x18, 0x0c, 0x9c, 0x01
  };

  static const unsigned char expect[32] = {
    0x1c, 0x54, 0xae, 0xd8, 0xa6, 0x76, 0x2d, 0xde,
    0x34, 0x28, 0xe8, 0xdc, 0x59, 0xdf, 0x54, 0x29,
    0x92, 0x96, 0xb3, 0xb6, 0xa5, 0xb6, 0x7c, 0x78,
    0xf9, 0xc3, 0x7b, 0xb1, 0x26, 0xa3, 0x7f, 0x50
  };

  (void)unused;

  printf("  - Testing edwards_mul_double_var (ED25519).\n");

  test_edwards_double_mul(EDWARDS_CURVE_ED25519, point, scalar1,
                                                 scalar2, expect);
}

static void
test_edwards_multi_mul_ed25519(drbg_t *unused) {
  static const unsigned char point1[32] = {
    0xfa, 0xa1, 0xa7, 0xbc, 0xc6, 0x40, 0x81, 0xe9,
    0xc4, 0x9b, 0x28, 0x49, 0x8a, 0x99, 0x50, 0xbb,
    0x58, 0x11, 0x4a, 0xd0, 0xf6, 0xf9, 0x1e, 0x11,
    0xfb, 0xf1, 0xce, 0xb3, 0x28, 0xf6, 0xac, 0xce
  };

  static const unsigned char point2[32] = {
    0x70, 0x21, 0x0f, 0xd8, 0xd5, 0x32, 0x0f, 0xcc,
    0xd1, 0x9e, 0x97, 0x96, 0x4f, 0x58, 0xd2, 0xf8,
    0x1e, 0x3c, 0x3e, 0x14, 0xfa, 0xed, 0xaa, 0xe2,
    0x32, 0x8f, 0x5d, 0x9a, 0x4e, 0x86, 0x5d, 0xc1
  };

  static const unsigned char scalar1[32] = {
    0x1b, 0xaf, 0x38, 0x8f, 0x81, 0x39, 0x2c, 0xb6,
    0x9d, 0xfe, 0xd8, 0xca, 0x76, 0x3d, 0xfd, 0xa0,
    0xb0, 0x3a, 0x90, 0xfa, 0xf3, 0x76, 0xd2, 0x94,
    0xff, 0x2a, 0x57, 0x44, 0xf3, 0x36, 0x59, 0x0f
  };

  static const unsigned char scalar2[32] = {
    0xa9, 0x4e, 0x67, 0x1e, 0xd0, 0xee, 0xa4, 0xe0,
    0x96, 0xd4, 0xa9, 0x10, 0x84, 0x28, 0xbb, 0x03,
    0x58, 0x00, 0x1c, 0xc0, 0x4a, 0x02, 0xd9, 0x02,
    0x75, 0xf9, 0x88, 0x94, 0x56, 0x06, 0x49, 0x0f
  };

  static const unsigned char scalar3[32] = {
    0xc3, 0x0f, 0xd1, 0x50, 0x6f, 0x29, 0x89, 0x7f,
    0x6e, 0xc8, 0x52, 0x04, 0x9e, 0xa4, 0x9f, 0xb0,
    0x46, 0x7e, 0xb2, 0x17, 0xb8, 0x4c, 0xd2, 0xbe,
    0x4e, 0xac, 0xd1, 0xe3, 0xeb, 0x7f, 0xda, 0x02
  };

  static const unsigned char expect[32] = {
    0x4f, 0x05, 0x88, 0x00, 0xfc, 0x45, 0xcb, 0xfe,
    0x75, 0x06, 0x48, 0x21, 0x23, 0xc6, 0xf7, 0x4e,
    0xbd, 0x44, 0x4f, 0x62, 0x4b, 0x6e, 0x28, 0x6a,
    0x36, 0x1d, 0x25, 0xea, 0x2a, 0xd5, 0x48, 0x86
  };

  (void)unused;

  printf("  - Testing edwards_mul_multi_var (ED25519).\n");

  test_edwards_multi_mul(EDWARDS_CURVE_ED25519, point1, point2,
                                                scalar1, scalar2,
                                                scalar3, expect);
}

static void
test_edwards_points_ed448(drbg_t *rng) {
  static const unsigned char points[3][MAX_FIELD_SIZE + 1] = {
    /* G, 2G, 3G */
    {
      0x14, 0xfa, 0x30, 0xf2, 0x5b, 0x79, 0x08, 0x98,
      0xad, 0xc8, 0xd7, 0x4e, 0x2c, 0x13, 0xbd, 0xfd,
      0xc4, 0x39, 0x7c, 0xe6, 0x1c, 0xff, 0xd3, 0x3a,
      0xd7, 0xc2, 0xa0, 0x05, 0x1e, 0x9c, 0x78, 0x87,
      0x40, 0x98, 0xa3, 0x6c, 0x73, 0x73, 0xea, 0x4b,
      0x62, 0xc7, 0xc9, 0x56, 0x37, 0x20, 0x76, 0x88,
      0x24, 0xbc, 0xb6, 0x6e, 0x71, 0x46, 0x3f, 0x69,
      0x00
    },
    {
      0xed, 0x86, 0x93, 0xea, 0xcd, 0xfb, 0xea, 0xda,
      0x6b, 0xa0, 0xcd, 0xd1, 0xbe, 0xb2, 0xbc, 0xbb,
      0x98, 0x30, 0x2a, 0x3a, 0x83, 0x65, 0x65, 0x0d,
      0xb8, 0xc4, 0xd8, 0x8a, 0x72, 0x6d, 0xe3, 0xb7,
      0xd7, 0x4d, 0x88, 0x35, 0xa0, 0xd7, 0x6e, 0x03,
      0xb0, 0xc2, 0x86, 0x50, 0x20, 0xd6, 0x59, 0xb3,
      0x8d, 0x04, 0xd7, 0x4a, 0x63, 0xe9, 0x05, 0xae,
      0x80
    },
    {
      0xfc, 0xd6, 0x8e, 0x58, 0x13, 0xac, 0x22, 0xb8,
      0xaf, 0x2d, 0xd0, 0xfe, 0x68, 0x9a, 0xfa, 0xbf,
      0xf0, 0x67, 0x67, 0xdb, 0x1b, 0x33, 0x3a, 0xbb,
      0x58, 0x1d, 0x4e, 0xec, 0x82, 0x3c, 0xe4, 0xfc,
      0xb9, 0xc3, 0x56, 0x23, 0x95, 0x8d, 0x4a, 0x9a,
      0x44, 0xa6, 0x3a, 0xd4, 0x7a, 0xda, 0xcb, 0x06,
      0xf7, 0x5c, 0x12, 0xd5, 0xdb, 0xa8, 0x05, 0xe0,
      0x80
    }
  };

  printf("  - Testing Edwards group law (ED448).\n");

  test_edwards_points(EDWARDS_CURVE_ED448, points, rng);
}

static void
test_edwards_mul_g_ed448(drbg_t *rng) {
  static const unsigned char scalar[56] = {
    0x2f, 0x7d, 0xae, 0x38, 0xfd, 0x87, 0xa6, 0xe0,
    0xd6, 0xc4, 0x52, 0xad, 0xe3, 0x7a, 0xff, 0x9b,
    0x6f, 0x83, 0x2b, 0xbf, 0xa1, 0x24, 0x12, 0x64,
    0x33, 0x95, 0x59, 0x48, 0xe5, 0x9c, 0x76, 0x2f,
    0x33, 0xad, 0x04, 0xd0, 0x66, 0xb7, 0xe1, 0x62,
    0x1b, 0x04, 0xea, 0x05, 0x7c, 0x1d, 0xe7, 0x05,
    0x52, 0x6c, 0x3a, 0x63, 0x59, 0x8e, 0x02, 0x1f
  };

  static const unsigned char expect[57] = {
    0x2a, 0x9c, 0xfa, 0xbf, 0x2d, 0x67, 0xc2, 0x6f,
    0xe9, 0xe8, 0x01, 0x2a, 0x46, 0x0b, 0xdb, 0x97,
    0xec, 0x6c, 0xfb, 0x7e, 0x51, 0x95, 0x7c, 0x52,
    0x4a, 0x96, 0x63, 0xc0, 0xc8, 0xc3, 0x98, 0xd3,
    0xd0, 0x4b, 0x01, 0xb5, 0x62, 0x03, 0xa2, 0xa4,
    0x00, 0xfd, 0x5c, 0xf2, 0x7f, 0x15, 0xfe, 0x35,
    0xc4, 0x36, 0xaa, 0x29, 0xd5, 0xca, 0x03, 0xc8,
    0x80
  };

  printf("  - Testing edwards_mul_g (ED448).\n");

  test_edwards_mul_g(EDWARDS_CURVE_ED448, scalar, expect, NULL);
  test_edwards_mul_g(EDWARDS_CURVE_ED448, scalar, expect, rng);
}

static void
test_edwards_mul_ed448(drbg_t *unused) {
  static const unsigned char point[57] = {
    0xe4, 0xf9, 0xd6, 0x71, 0xec, 0x73, 0x35, 0x44,
    0x53, 0xe7, 0x2c, 0x4c, 0x83, 0x02, 0x86, 0xf1,
    0xb1, 0x66, 0x4e, 0x14, 0x00, 0x0f, 0x01, 0xb3,
    0x89, 0xe6, 0x41, 0x8c, 0xde, 0xe8, 0x66, 0xe8,
    0xd8, 0xbd, 0x68, 0xa3, 0x31, 0x07, 0xf6, 0x58,
    0xf5, 0x48, 0x10, 0xd5, 0x7b, 0x2c, 0xda, 0x81,
    0x8d, 0xb8, 0xa4, 0x23, 0x9e, 0xce, 0xe6, 0xc8,
    0x80
  };

  static const unsigned char scalar[56] = {
    0x27, 0xc4, 0xc5, 0x92, 0x91, 0x50, 0x73, 0x34,
    0x48, 0xc0, 0x87, 0xbb, 0xa0, 0x05, 0x29, 0x94,
    0x92, 0xe3, 0x5f, 0xb9, 0x27, 0xd4, 0x4a, 0x33,
    0x52, 0xbf, 0x88, 0x39, 0x32, 0x2f, 0x81, 0x4a,
    0xb5, 0xc8, 0xa2, 0xac, 0x1a, 0x0d, 0x6f, 0x2a,
    0x02, 0x4a, 0xa6, 0xf6, 0xa8, 0x5a, 0x72, 0x07,
    0xc6, 0xff, 0x27, 0xef, 0x3f, 0x7d, 0xef, 0x0c
  };

  static const unsigned char expect[57] = {
    0xb9, 0x69, 0xf1, 0x9b, 0x35, 0x33, 0x11, 0x67,
    0x5f, 0xb3, 0xf9, 0x60, 0x73, 0x7b, 0x97, 0xd8,
    0xce, 0x41, 0x24, 0x48, 0x2f, 0x6b, 0xdd, 0x3f,
    0x41, 0xdc, 0x2d, 0x6e, 0xc9, 0x0d, 0x88, 0xec,
    0xa0, 0xfb, 0x9b, 0x13, 0x42, 0xf6, 0x54, 0x5e,
    0x71, 0x3b, 0xa9, 0x29, 0xd7, 0xe8, 0x5d, 0x59,
    0x2e, 0xa4, 0x5b, 0x12, 0x00, 0xf9, 0x9b, 0xd2,
    0x00
  };

  (void)unused;

  printf("  - Testing edwards_mul (ED448).\n");

  test_edwards_mul(EDWARDS_CURVE_ED448, point, scalar, expect);
}

static void
test_edwards_double_mul_ed448(drbg_t *unused) {
  static const unsigned char point[57] = {
    0x31, 0xd1, 0x26, 0x0a, 0x2c, 0x49, 0xd5, 0xef,
    0x23, 0x0c, 0x05, 0x2e, 0x73, 0xc2, 0x95, 0x6a,
    0xdc, 0xa3, 0xe5, 0x07, 0x18, 0xf7, 0xab, 0xab,
    0x7f, 0x09, 0x59, 0x4a, 0xf9, 0xbc, 0x7c, 0x8d,
    0xbe, 0xe3, 0x25, 0x4f, 0x49, 0xc9, 0x03, 0x4f,
    0x1a, 0x99, 0xdd, 0x18, 0x70, 0x3a, 0x42, 0xb6,
    0xc2, 0xad, 0x9b, 0xb6, 0xbf, 0xf5, 0x08, 0x64,
    0x80
  };

  static const unsigned char scalar1[56] = {
    0xe6, 0xfd, 0x32, 0x42, 0x24, 0x38, 0xaa, 0x10,
    0xe8, 0xfc, 0x51, 0xbd, 0x17, 0x47, 0x12, 0x9e,
    0xb2, 0xa3, 0x06, 0x92, 0xd0, 0x26, 0x3c, 0xd7,
    0xe6, 0xa8, 0x39, 0x82, 0x53, 0x30, 0xba, 0x39,
    0x62, 0x46, 0x58, 0xc6, 0xf8, 0x87, 0x36, 0xf7,
    0x64, 0x6f, 0xf5, 0xcd, 0xd4, 0x31, 0x96, 0x37,
    0xb4, 0x50, 0x1a, 0xe8, 0x20, 0x8e, 0x59, 0x13
  };

  static const unsigned char scalar2[56] = {
    0xa0, 0x26, 0x46, 0x99, 0x30, 0x51, 0x93, 0x6b,
    0x14, 0xba, 0xc5, 0x0c, 0x85, 0xa9, 0xbf, 0xd0,
    0xa5, 0x3c, 0x71, 0xd0, 0xaf, 0x2c, 0xe6, 0x02,
    0x8d, 0x46, 0x56, 0x72, 0x3b, 0xad, 0x28, 0x06,
    0x5a, 0x1f, 0xc1, 0x55, 0x3d, 0xcf, 0xca, 0x0a,
    0x86, 0xe5, 0x4a, 0xe3, 0x39, 0x60, 0xca, 0x89,
    0x8a, 0xe8, 0x74, 0x3f, 0x08, 0x00, 0xd6, 0x27
  };

  static const unsigned char expect[57] = {
    0x76, 0x0d, 0x0f, 0x4e, 0x4c, 0xb6, 0x22, 0xd1,
    0x7e, 0x94, 0xa2, 0x9a, 0x3f, 0x7e, 0x26, 0x39,
    0x23, 0xdd, 0x33, 0x11, 0x74, 0xa9, 0x16, 0xdd,
    0xd2, 0x12, 0x06, 0xdb, 0xa4, 0x6c, 0x2e, 0xa2,
    0x80, 0x5e, 0x68, 0xca, 0xb9, 0xd3, 0x3a, 0xb6,
    0xb1, 0x29, 0x4e, 0xd5, 0x39, 0x6b, 0x79, 0x27,
    0xd1, 0x3c, 0x6f, 0xd7, 0x4e, 0xb1, 0x5d, 0x25,
    0x80
  };

  (void)unused;

  printf("  - Testing edwards_mul_double_var (ED448).\n");

  test_edwards_double_mul(EDWARDS_CURVE_ED448, point, scalar1,
                                               scalar2, expect);
}

static void
test_edwards_multi_mul_ed448(drbg_t *unused) {
  static const unsigned char point1[57] = {
    0xbe, 0xfc, 0x18, 0xf7, 0xad, 0x68, 0xc0, 0x96,
    0xe0, 0x00, 0xcc, 0x0f, 0x89, 0x98, 0x80, 0xae,
    0x6b, 0x06, 0x7f, 0xc8, 0xd2, 0x98, 0x0a, 0x1e,
    0x3f, 0x54, 0x5a, 0x0b, 0xb9, 0x84, 0x70, 0x57,
    0x7c, 0x2c, 0x71, 0x1d, 0x96, 0x59, 0x0d, 0x27,
    0xbc, 0xc5, 0xb9, 0xe2, 0x3a, 0xc6, 0x1b, 0xa1,
    0xa0, 0xdf, 0x10, 0x7d, 0xad, 0x78, 0xe5, 0xf2,
    0x80
  };

  static const unsigned char point2[57] = {
    0xc1, 0xde, 0x24, 0x04, 0x1f, 0x1b, 0x6c, 0xb7,
    0xf5, 0x99, 0xd6, 0xba, 0x01, 0xf2, 0xb4, 0x34,
    0xad, 0xd9, 0x3b, 0x19, 0xa5, 0x16, 0x0b, 0x07,
    0x13, 0x3f, 0xfe, 0xa5, 0x8d, 0x0e, 0x4d, 0x3b,
    0xae, 0xd7, 0xbf, 0x8b, 0x60, 0xde, 0xc0, 0x6c,
    0x01, 0x8c, 0x1e, 0x58, 0xd7, 0xea, 0x9b, 0x65,
    0x9b, 0xec, 0x5e, 0x75, 0x7f, 0x20, 0x6b, 0x9b,
    0x80
  };

  static const unsigned char scalar1[56] = {
    0xb4, 0x2e, 0x03, 0xbd, 0xb2, 0x09, 0x42, 0x3a,
    0xc6, 0x35, 0x84, 0x7e, 0xa5, 0xfb, 0xc5, 0x4b,
    0xbc, 0x18, 0xbc, 0x53, 0x26, 0x63, 0x03, 0xe5,
    0xfe, 0x01, 0xdf, 0x09, 0x39, 0x06, 0xf1, 0x22,
    0x82, 0xec, 0x29, 0x2a, 0xe4, 0xde, 0x0e, 0x99,
    0xf3, 0x72, 0xd3, 0x61, 0x06, 0xe9, 0x6f, 0xa2,
    0xb5, 0xe0, 0x28, 0xa2, 0x79, 0x9f, 0xaf, 0x13
  };

  static const unsigned char scalar2[56] = {
    0x33, 0x4f, 0x5b, 0x9c, 0x58, 0xdb, 0x6c, 0x3e,
    0x64, 0x80, 0xe4, 0xb9, 0xa5, 0x59, 0x11, 0x4c,
    0x51, 0xba, 0xab, 0x4e, 0xf1, 0xd2, 0x84, 0xf5,
    0x00, 0xcb, 0x06, 0x1c, 0x58, 0xfa, 0x44, 0xb3,
    0x80, 0x9e, 0xd3, 0xa7, 0x4b, 0x3e, 0x72, 0x25,
    0x2c, 0xae, 0xc6, 0x00, 0x04, 0x1c, 0x4e, 0x2a,
    0xd9, 0x0d, 0x8e, 0xe4, 0xa4, 0xbd, 0x89, 0x12
  };

  static const unsigned char scalar3[56] = {
    0xa3, 0x94, 0xc7, 0xa6, 0xfa, 0xfb, 0xf3, 0x1c,
    0x01, 0xc6, 0x72, 0x3d, 0xfa, 0x25, 0x11, 0xa8,
    0x66, 0x72, 0xc4, 0x44, 0x97, 0x06, 0x38, 0x4c,
    0x2e, 0xd7, 0x56, 0x7f, 0x04, 0x31, 0xba, 0xe1,
    0xaf, 0xc3, 0xcc, 0xc1, 0xe7, 0x24, 0x94, 0xb8,
    0x53, 0xe6, 0x9a, 0x42, 0x75, 0x1c, 0x73, 0xf9,
    0x59, 0xce, 0x7d, 0x25, 0x00, 0x0b, 0x5c, 0x1a
  };

  static const unsigned char expect[57] = {
    0x51, 0x93, 0xf5, 0x77, 0x7f, 0xd0, 0x2b, 0x33,
    0xc0, 0xe5, 0x1a, 0x33, 0xe9, 0xb1, 0x71, 0x1e,
    0x7c, 0x49, 0xca, 0x7c, 0x8e, 0x33, 0x04, 0xb0,
    0xbf, 0xda, 0xf9, 0x0a, 0xda, 0x3e, 0x53, 0x43,
    0xf9, 0x87, 0x99, 0x34, 0x4e, 0xb1, 0x84, 0x72,
    0x47, 0x78, 0x23, 0x1b, 0x12, 0xcb, 0xb0, 0x34,
    0x8f, 0xd5, 0x61, 0xf2, 0xbb, 0xe3, 0xec, 0x59,
    0x80
  };

  (void)unused;

  printf("  - Testing edwards_mul_multi_var (ED448).\n");

  test_edwards_multi_mul(EDWARDS_CURVE_ED448, point1, point2,
                                              scalar1, scalar2,
                                              scalar3, expect);
}

/*
 * Ristretto
 */

static void
test_ristretto_basepoint_multiples(drbg_t *unused) {
  /* https://ristretto.group/test_vectors/ristretto255.html */
  static const unsigned char multiples[][32] = {
    {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {
      0xe2, 0xf2, 0xae, 0x0a, 0x6a, 0xbc, 0x4e, 0x71,
      0xa8, 0x84, 0xa9, 0x61, 0xc5, 0x00, 0x51, 0x5f,
      0x58, 0xe3, 0x0b, 0x6a, 0xa5, 0x82, 0xdd, 0x8d,
      0xb6, 0xa6, 0x59, 0x45, 0xe0, 0x8d, 0x2d, 0x76
    },
    {
      0x6a, 0x49, 0x32, 0x10, 0xf7, 0x49, 0x9c, 0xd1,
      0x7f, 0xec, 0xb5, 0x10, 0xae, 0x0c, 0xea, 0x23,
      0xa1, 0x10, 0xe8, 0xd5, 0xb9, 0x01, 0xf8, 0xac,
      0xad, 0xd3, 0x09, 0x5c, 0x73, 0xa3, 0xb9, 0x19
    },
    {
      0x94, 0x74, 0x1f, 0x5d, 0x5d, 0x52, 0x75, 0x5e,
      0xce, 0x4f, 0x23, 0xf0, 0x44, 0xee, 0x27, 0xd5,
      0xd1, 0xea, 0x1e, 0x2b, 0xd1, 0x96, 0xb4, 0x62,
      0x16, 0x6b, 0x16, 0x15, 0x2a, 0x9d, 0x02, 0x59
    },
    {
      0xda, 0x80, 0x86, 0x27, 0x73, 0x35, 0x8b, 0x46,
      0x6f, 0xfa, 0xdf, 0xe0, 0xb3, 0x29, 0x3a, 0xb3,
      0xd9, 0xfd, 0x53, 0xc5, 0xea, 0x6c, 0x95, 0x53,
      0x58, 0xf5, 0x68, 0x32, 0x2d, 0xaf, 0x6a, 0x57
    },
    {
      0xe8, 0x82, 0xb1, 0x31, 0x01, 0x6b, 0x52, 0xc1,
      0xd3, 0x33, 0x70, 0x80, 0x18, 0x7c, 0xf7, 0x68,
      0x42, 0x3e, 0xfc, 0xcb, 0xb5, 0x17, 0xbb, 0x49,
      0x5a, 0xb8, 0x12, 0xc4, 0x16, 0x0f, 0xf4, 0x4e
    },
    {
      0xf6, 0x47, 0x46, 0xd3, 0xc9, 0x2b, 0x13, 0x05,
      0x0e, 0xd8, 0xd8, 0x02, 0x36, 0xa7, 0xf0, 0x00,
      0x7c, 0x3b, 0x3f, 0x96, 0x2f, 0x5b, 0xa7, 0x93,
      0xd1, 0x9a, 0x60, 0x1e, 0xbb, 0x1d, 0xf4, 0x03
    },
    {
      0x44, 0xf5, 0x35, 0x20, 0x92, 0x6e, 0xc8, 0x1f,
      0xbd, 0x5a, 0x38, 0x78, 0x45, 0xbe, 0xb7, 0xdf,
      0x85, 0xa9, 0x6a, 0x24, 0xec, 0xe1, 0x87, 0x38,
      0xbd, 0xcf, 0xa6, 0xa7, 0x82, 0x2a, 0x17, 0x6d
    },
    {
      0x90, 0x32, 0x93, 0xd8, 0xf2, 0x28, 0x7e, 0xbe,
      0x10, 0xe2, 0x37, 0x4d, 0xc1, 0xa5, 0x3e, 0x0b,
      0xc8, 0x87, 0xe5, 0x92, 0x69, 0x9f, 0x02, 0xd0,
      0x77, 0xd5, 0x26, 0x3c, 0xdd, 0x55, 0x60, 0x1c
    },
    {
      0x02, 0x62, 0x2a, 0xce, 0x8f, 0x73, 0x03, 0xa3,
      0x1c, 0xaf, 0xc6, 0x3f, 0x8f, 0xc4, 0x8f, 0xdc,
      0x16, 0xe1, 0xc8, 0xc8, 0xd2, 0x34, 0xb2, 0xf0,
      0xd6, 0x68, 0x52, 0x82, 0xa9, 0x07, 0x60, 0x31
    },
    {
      0x20, 0x70, 0x6f, 0xd7, 0x88, 0xb2, 0x72, 0x0a,
      0x1e, 0xd2, 0xa5, 0xda, 0xd4, 0x95, 0x2b, 0x01,
      0xf4, 0x13, 0xbc, 0xf0, 0xe7, 0x56, 0x4d, 0xe8,
      0xcd, 0xc8, 0x16, 0x68, 0x9e, 0x2d, 0xb9, 0x5f
    },
    {
      0xbc, 0xe8, 0x3f, 0x8b, 0xa5, 0xdd, 0x2f, 0xa5,
      0x72, 0x86, 0x4c, 0x24, 0xba, 0x18, 0x10, 0xf9,
      0x52, 0x2b, 0xc6, 0x00, 0x4a, 0xfe, 0x95, 0x87,
      0x7a, 0xc7, 0x32, 0x41, 0xca, 0xfd, 0xab, 0x42
    },
    {
      0xe4, 0x54, 0x9e, 0xe1, 0x6b, 0x9a, 0xa0, 0x30,
      0x99, 0xca, 0x20, 0x8c, 0x67, 0xad, 0xaf, 0xca,
      0xfa, 0x4c, 0x3f, 0x3e, 0x4e, 0x53, 0x03, 0xde,
      0x60, 0x26, 0xe3, 0xca, 0x8f, 0xf8, 0x44, 0x60
    },
    {
      0xaa, 0x52, 0xe0, 0x00, 0xdf, 0x2e, 0x16, 0xf5,
      0x5f, 0xb1, 0x03, 0x2f, 0xc3, 0x3b, 0xc4, 0x27,
      0x42, 0xda, 0xd6, 0xbd, 0x5a, 0x8f, 0xc0, 0xbe,
      0x01, 0x67, 0x43, 0x6c, 0x59, 0x48, 0x50, 0x1f
    },
    {
      0x46, 0x37, 0x6b, 0x80, 0xf4, 0x09, 0xb2, 0x9d,
      0xc2, 0xb5, 0xf6, 0xf0, 0xc5, 0x25, 0x91, 0x99,
      0x08, 0x96, 0xe5, 0x71, 0x6f, 0x41, 0x47, 0x7c,
      0xd3, 0x00, 0x85, 0xab, 0x7f, 0x10, 0x30, 0x1e
    },
    {
      0xe0, 0xc4, 0x18, 0xf7, 0xc8, 0xd9, 0xc4, 0xcd,
      0xd7, 0x39, 0x5b, 0x93, 0xea, 0x12, 0x4f, 0x3a,
      0xd9, 0x90, 0x21, 0xbb, 0x68, 0x1d, 0xfc, 0x33,
      0x02, 0xa9, 0xd9, 0x9a, 0x2e, 0x53, 0xe6, 0x4e
    }
  };

  edwards_t *ec = edwards_curve_create(EDWARDS_CURVE_ED25519);
  rge_t p, q;
  xge_t a, b;
  size_t i;

  (void)unused;

  printf("  - Testing ristretto_basepoint_multiples (ED25519).\n");

  xge_zero(ec, &p);

  for (i = 0; i < ARRAY_SIZE(multiples); i++) {
    const unsigned char *raw = multiples[i];

    ASSERT(rge_import(ec, &q, raw));
    ASSERT(rge_equal(ec, &q, &p));
    ASSERT(rge_equal_raw(ec, &p, raw));
    ASSERT(rge_equal_raw(ec, &q, raw));

    ASSERT(xge_validate(ec, &p));
    ASSERT(xge_validate(ec, &q));

    xge_mulh(ec, &a, &p);
    xge_mulh(ec, &b, &q);

    ASSERT(xge_equal(ec, &a, &b));

    xge_add(ec, &p, &p, &ec->g);
  }

  edwards_curve_destroy(ec);
}

static void
test_ristretto_elligator(drbg_t *unused) {
  /* https://ristretto.group/test_vectors/ristretto255.html */
  static const unsigned char bytes[][32] = {
    {
      0xb8, 0xf9, 0x87, 0x31, 0xfd, 0x7b, 0x59, 0x71,
      0x43, 0xa0, 0x06, 0xef, 0x07, 0x69, 0xd3, 0x29,
      0xc0, 0xf9, 0xb9, 0x39, 0x09, 0x66, 0x46, 0xc6,
      0x0f, 0x7f, 0x07, 0x1a, 0xa0, 0x66, 0x86, 0x47
    },
    {
      0xe5, 0x0e, 0xf1, 0xe3, 0x4b, 0x09, 0x76, 0x3c,
      0x80, 0x99, 0xe2, 0x15, 0xb7, 0xd9, 0x5b, 0x88,
      0x62, 0x00, 0xe7, 0x9c, 0x7c, 0x4d, 0x52, 0x8b,
      0x8e, 0x86, 0xa4, 0xa9, 0xa9, 0x3e, 0xfa, 0x34
    },
    {
      0x73, 0x6d, 0x24, 0xdc, 0xb4, 0xdf, 0x63, 0x06,
      0xcc, 0xa9, 0x13, 0x1d, 0xa9, 0x44, 0x54, 0x17,
      0x15, 0x6d, 0xbd, 0x95, 0x7f, 0xcd, 0x5b, 0x66,
      0xac, 0x23, 0x70, 0x23, 0x86, 0x45, 0xba, 0x22
    },
    {
      0x10, 0x31, 0x60, 0x6b, 0xab, 0xc7, 0xa4, 0x09,
      0x81, 0x10, 0x40, 0x3e, 0xf1, 0x3f, 0x84, 0xad,
      0xd1, 0xa0, 0x70, 0xd7, 0x69, 0x32, 0x9d, 0x51,
      0xfd, 0x69, 0x01, 0x9a, 0xe5, 0x19, 0x78, 0x53
    },
    {
      0x9c, 0x83, 0xa1, 0xa2, 0xec, 0xfb, 0x05, 0xbb,
      0xa7, 0xab, 0x11, 0xb2, 0x94, 0xd2, 0x5a, 0xcf,
      0x56, 0x15, 0x4f, 0xa1, 0xa7, 0xd7, 0xea, 0x01,
      0x88, 0xf2, 0xb6, 0xf8, 0x26, 0x55, 0x4f, 0x56
    },
    {
      0xfb, 0xb1, 0x7c, 0x36, 0x12, 0x65, 0x4b, 0xeb,
      0xf5, 0xba, 0x13, 0x2e, 0x85, 0x9d, 0xe5, 0x40,
      0x0a, 0x88, 0xb5, 0xb9, 0x4e, 0x90, 0xfe, 0xa7,
      0x89, 0x31, 0x6b, 0x0a, 0x3d, 0x0a, 0x15, 0x19
    },
    {
      0xe8, 0xc1, 0x14, 0x44, 0xf0, 0x4d, 0xba, 0x4d,
      0xb7, 0x28, 0x2c, 0x56, 0x96, 0x1f, 0xc6, 0xd4,
      0x4c, 0x51, 0x03, 0xd9, 0xc5, 0x08, 0x7e, 0x80,
      0x7e, 0x98, 0xa4, 0xd0, 0x99, 0x2c, 0xbd, 0x4d
    },
    {
      0xad, 0xe5, 0x95, 0xb1, 0x25, 0xe6, 0x1e, 0x45,
      0x3d, 0x38, 0xac, 0xbe, 0xdb, 0x73, 0xa7, 0xc2,
      0x47, 0x86, 0x3b, 0x4b, 0x1c, 0xf4, 0x76, 0x1a,
      0xa2, 0x61, 0x40, 0x10, 0x0f, 0xbd, 0x1e, 0x40
    },
    {
      0x6a, 0x47, 0x3d, 0x6b, 0xfa, 0x75, 0x2a, 0x97,
      0x5b, 0xca, 0xd4, 0x64, 0x34, 0xbc, 0xbe, 0x15,
      0x7d, 0xda, 0x1f, 0x12, 0xfd, 0xf1, 0xa0, 0x85,
      0x39, 0xf2, 0x03, 0xa4, 0xbd, 0x44, 0x6f, 0x4b
    },
    {
      0x70, 0xcc, 0xb6, 0x5a, 0xdc, 0xc6, 0x78, 0x49,
      0xad, 0x6b, 0xc1, 0x11, 0xe3, 0x28, 0xa2, 0x24,
      0x96, 0x8d, 0xeb, 0x37, 0xac, 0xb7, 0x0c, 0x27,
      0xc2, 0x88, 0x2b, 0x99, 0xf4, 0x76, 0x5b, 0x59
    },
    {
      0x6f, 0x18, 0xcb, 0x7b, 0xfe, 0xbd, 0x0b, 0xa2,
      0x33, 0xc4, 0xa3, 0x88, 0xcc, 0x8f, 0x0a, 0xde,
      0x21, 0x70, 0x51, 0xcd, 0x22, 0x23, 0x08, 0x42,
      0x5a, 0x06, 0xa4, 0x3a, 0xaa, 0xb1, 0x22, 0x19
    },
    {
      0xe1, 0xb7, 0x1e, 0x34, 0xec, 0x52, 0x06, 0xb7,
      0x6d, 0x19, 0xe3, 0xb5, 0x19, 0x52, 0x29, 0xc1,
      0x50, 0x4d, 0xa1, 0x50, 0xf2, 0xcb, 0x4f, 0xcc,
      0x88, 0xf5, 0x83, 0x6e, 0xed, 0x6a, 0x03, 0x3a
    },
    {
      0xcf, 0xf6, 0x26, 0x38, 0x1e, 0x56, 0xb0, 0x5a,
      0x1b, 0xc8, 0x3d, 0x2a, 0xdd, 0x1b, 0x38, 0xd2,
      0x4f, 0xb2, 0xbd, 0x78, 0x44, 0xc1, 0x78, 0xa7,
      0x4d, 0xb9, 0x35, 0xc5, 0x7c, 0x80, 0xbf, 0x7e
    },
    {
      0x01, 0x88, 0xd7, 0x50, 0xf0, 0x2e, 0x3f, 0x93,
      0x10, 0xf4, 0xe6, 0xcf, 0x52, 0xbd, 0x4a, 0x32,
      0x6a, 0xa9, 0x8a, 0x56, 0x1e, 0x83, 0xd6, 0xca,
      0xa6, 0x7d, 0xfb, 0xe4, 0x62, 0x18, 0x24, 0x15
    },
    {
      0xd2, 0xcf, 0xe4, 0x38, 0x9b, 0x74, 0xcf, 0x36,
      0x54, 0xc3, 0xfb, 0xd7, 0xf9, 0xc7, 0x74, 0x4b,
      0x6d, 0xef, 0xc4, 0xfb, 0xc2, 0xf6, 0xfc, 0xe4,
      0x46, 0x92, 0x9c, 0x23, 0x19, 0x27, 0xf1, 0x04
    },
    {
      0x22, 0x74, 0x7b, 0x09, 0x08, 0x28, 0x5d, 0xbd,
      0x09, 0x67, 0x39, 0x67, 0x42, 0xe3, 0x03, 0x02,
      0x9d, 0x6b, 0x86, 0xdb, 0xca, 0x4a, 0xe6, 0x9a,
      0x4e, 0x6b, 0xdb, 0xc3, 0xd6, 0x0e, 0x54, 0x50
    }
  };

  static const unsigned char images[][32] = {
    {
      0xb0, 0x9d, 0xed, 0x61, 0x42, 0x1d, 0x8c, 0xa6,
      0xa8, 0x5e, 0x1a, 0x9d, 0xd4, 0xd8, 0xe5, 0xa0,
      0xc3, 0xf6, 0xe8, 0xef, 0xa9, 0x70, 0x3f, 0xc1,
      0x40, 0x20, 0x98, 0x45, 0x0b, 0xbe, 0xf6, 0x56
    },
    {
      0xea, 0x8d, 0x4d, 0xcb, 0xb5, 0xe1, 0xfa, 0x4a,
      0xab, 0x3e, 0x0f, 0x76, 0x4e, 0xd4, 0x96, 0x13,
      0x83, 0x0e, 0xbc, 0xee, 0xc2, 0xf4, 0x8d, 0x8a,
      0xa6, 0xa2, 0x53, 0x7a, 0xe4, 0xc9, 0x13, 0x1a
    },
    {
      0xe8, 0xe7, 0x33, 0x5c, 0x05, 0xa8, 0x50, 0x24,
      0xad, 0xb3, 0x68, 0x44, 0xba, 0x95, 0x44, 0x28,
      0x8c, 0xaa, 0x1b, 0x67, 0x63, 0x8c, 0x15, 0xf2,
      0x2b, 0x3e, 0xfa, 0x86, 0xd0, 0xff, 0x3d, 0x59
    },
    {
      0xd0, 0x78, 0x8c, 0x81, 0xb1, 0xb3, 0xed, 0x9f,
      0xfc, 0xa0, 0x1c, 0x0d, 0xce, 0x05, 0xd3, 0xf1,
      0xc0, 0xda, 0x01, 0x61, 0x82, 0xf1, 0x14, 0xa9,
      0x77, 0x2e, 0xf6, 0x1d, 0x4f, 0x50, 0x4d, 0x54
    },
    {
      0xca, 0x0b, 0xec, 0x91, 0x3a, 0x0c, 0xb5, 0x9d,
      0xd1, 0x06, 0xd5, 0x58, 0x4b, 0x93, 0x0b, 0x77,
      0xbf, 0x8b, 0x2f, 0x8e, 0x21, 0x24, 0x99, 0xc1,
      0xdf, 0xb7, 0xb2, 0x08, 0xcd, 0x78, 0xf8, 0x6e
    },
    {
      0x1a, 0x42, 0xe7, 0x43, 0xcb, 0xaf, 0x74, 0x82,
      0x20, 0x88, 0x3e, 0xfd, 0xd7, 0x2e, 0x05, 0xd6,
      0xa6, 0xf8, 0x6c, 0xed, 0xd8, 0x47, 0xf4, 0xad,
      0x48, 0x85, 0x52, 0x06, 0x8f, 0xf0, 0x68, 0x29
    },
    {
      0x28, 0x9d, 0x66, 0x60, 0xc9, 0xdf, 0xc8, 0xc5,
      0x96, 0xb5, 0x6a, 0x53, 0x67, 0x7e, 0x8f, 0x21,
      0x91, 0xe6, 0x4e, 0x06, 0xab, 0x92, 0xd2, 0x8f,
      0x70, 0x05, 0xf5, 0x17, 0xb7, 0x8a, 0x12, 0x78
    },
    {
      0xdc, 0x25, 0x1b, 0xcb, 0xef, 0xc4, 0xb0, 0x83,
      0x25, 0x42, 0xbc, 0xf3, 0xb9, 0xfa, 0x71, 0x17,
      0xa7, 0xd3, 0x9a, 0xf3, 0xa8, 0xd7, 0x36, 0xab,
      0x9f, 0x24, 0xc3, 0x51, 0x0d, 0x96, 0x2b, 0x2b
    },
    {
      0xe8, 0x79, 0xb0, 0xde, 0xb7, 0xc4, 0x9f, 0x5a,
      0xee, 0xc1, 0x69, 0x34, 0x65, 0xa7, 0xf4, 0xaa,
      0x79, 0x72, 0xc4, 0x06, 0x43, 0x98, 0x50, 0xb9,
      0xdd, 0x07, 0x53, 0x69, 0xb0, 0xd0, 0xe0, 0x79
    },
    {
      0xe2, 0xb5, 0xb7, 0x34, 0xf1, 0xa3, 0x3d, 0xb3,
      0xdd, 0xcf, 0xdc, 0x49, 0xf5, 0xf2, 0x19, 0xec,
      0x43, 0x54, 0xb3, 0xde, 0xa7, 0x3e, 0xa7, 0xb6,
      0x20, 0x09, 0x5c, 0x1e, 0xa5, 0x7f, 0xcc, 0x44
    },
    {
      0xe2, 0x77, 0x10, 0xf2, 0xc8, 0x8b, 0xf0, 0x57,
      0x0b, 0xde, 0x5c, 0x92, 0x9c, 0xf3, 0x2e, 0x77,
      0x41, 0x3b, 0x01, 0xf8, 0x5c, 0xb7, 0x32, 0xaf,
      0x57, 0x28, 0xce, 0x35, 0xd0, 0xdc, 0x94, 0x0d
    },
    {
      0x46, 0xf0, 0x4f, 0x70, 0x36, 0x9d, 0xe4, 0x92,
      0x4a, 0x7a, 0xd8, 0x58, 0xe8, 0x3e, 0x9e, 0x0d,
      0x0e, 0x92, 0x73, 0x75, 0xb0, 0xde, 0x5a, 0xe1,
      0xf4, 0x17, 0x5e, 0xbe, 0x96, 0x07, 0x88, 0x60
    },
    {
      0x16, 0x47, 0xf1, 0x67, 0x2d, 0xc1, 0xc3, 0x90,
      0xb7, 0x65, 0x9a, 0x32, 0x27, 0x44, 0x31, 0x6e,
      0x33, 0x2c, 0x3e, 0x00, 0xe5, 0x71, 0x48, 0x51,
      0xa8, 0x1d, 0x49, 0x6a, 0x66, 0x28, 0x84, 0x18
    },
    {
      0xc4, 0x85, 0x6b, 0x0b, 0x82, 0x69, 0x4a, 0x21,
      0xcc, 0xab, 0x85, 0xdd, 0xae, 0xc1, 0xf1, 0x24,
      0x26, 0xb3, 0xc4, 0x6b, 0xdb, 0xb9, 0xb5, 0xfd,
      0xe4, 0x2f, 0x9b, 0x2a, 0xe7, 0x49, 0x29, 0x4e
    },
    {
      0x3a, 0xff, 0xe1, 0xc5, 0x73, 0xd0, 0xa0, 0x8f,
      0x27, 0xc5, 0x52, 0x45, 0x8f, 0xeb, 0x5c, 0xaa,
      0x4a, 0x28, 0x39, 0x0b, 0xab, 0xe3, 0x1a, 0xb9,
      0xd9, 0xcf, 0x5a, 0xb9, 0xc5, 0xbe, 0x23, 0x3c
    },
    {
      0x58, 0x2b, 0x5c, 0x76, 0xdf, 0x88, 0x69, 0x91,
      0xee, 0xba, 0x73, 0x08, 0xd6, 0x70, 0x99, 0xfd,
      0x26, 0x6c, 0xcd, 0xe6, 0x9d, 0x82, 0x0b, 0x42,
      0x65, 0x55, 0xfd, 0x6e, 0x6e, 0x0e, 0x94, 0x70
    }
  };

  static const unsigned int hints[] = {
    0,
    16,
    23,
    0,
    2,
    23,
    2,
    16,
    3,
    3,
    18,
    23,
    20,
    21,
    3,
    3
  };

  static const size_t totals[] = {
    3,
    5,
    2,
    4,
    4,
    5,
    5,
    4,
    7,
    5,
    4,
    5,
    6,
    4,
    5,
    6
  };

  edwards_t *ec = edwards_curve_create(EDWARDS_CURVE_ED25519);
  prime_field_t *fe = &ec->fe;
  size_t i, j, total;
  fe_t r0, r1;
  rge_t p, q;

  (void)unused;

  printf("  - Testing ristretto_elligator (ED25519).\n");

  for (i = 0; i < ARRAY_SIZE(images); i++) {
    ASSERT(fe_import(fe, r0, bytes[i]));

    ristretto_elligator(ec, &p, r0);

    ASSERT(rge_equal_raw(ec, &p, images[i]));

    /* Ensure correct torsion group / affinize. */
    rge_normalize(ec, &p, &p);

    ASSERT(ristretto_invert(ec, r1, &p, hints[i]));
    ASSERT(fe_equal(fe, r1, r0));

    total = 0;

    for (j = 0; j < 8; j++) {
      if (ristretto_invert(ec, r1, &p, j)) {
        ristretto_elligator(ec, &q, r1);

        ASSERT(rge_equal(ec, &q, &p));

        total += 1;
      }
    }

    ASSERT(total == totals[i]);
  }

  edwards_curve_destroy(ec);
}

static void
test_ristretto_batch_encode(drbg_t *unused) {
  edwards_t *ec = edwards_curve_create(EDWARDS_CURVE_ED25519);
  unsigned char *encoded[16];
  unsigned char data[16 * 32];
  rge_t points[16];
  rge_t p, q;
  size_t i;

  (void)unused;

  printf("  - Testing ristretto_batch_encode (ED25519).\n");

  for (i = 0; i < 16; i++)
    encoded[i] = &data[i * 32];

  xge_zero(ec, &p);

  for (i = 0; i < 16; i++) {
    xge_set(ec, &points[i], &p);
    xge_add(ec, &p, &p, &ec->g);
  }

  rge_export_batch(ec, encoded, points, 16);

  for (i = 0; i < 16; i++) {
    ASSERT(rge_import(ec, &q, encoded[i]));

    xge_dbl(ec, &p, &points[i]);

    ASSERT(rge_equal(ec, &q, &p));
  }

  edwards_curve_destroy(ec);
}

void
test_ecc_internal(drbg_t *rng) {
  printf("Testing internal ECC functions...\n");

  /* Memcmp */
  test_memcmp(rng);

  /* Scalar */
  test_scalar_encoding_secq256k1(rng);
  test_scalar_encoding_q25519(rng);
  test_scalar_addsub_secq256k1(rng);
  test_scalar_reduce_secq256k1(rng);
  test_scalar_invert_q251(rng);
  test_scalar_naf(rng);
  test_scalar_jsf(rng);

  /* Field Element */
  test_field_element(rng);

  /* Utils */
  test_bytes_zero(rng);
  test_bytes_lt(rng);
  test_mpn_sec_cmp(rng);

  /* ECC */
  test_wei_points_p256(rng);
  test_wei_degenerate_points_p256(rng);
  test_wei_fuzzy_equality_p256(rng);
  test_wei_points_p521(rng);
  test_wei_degenerate_points_p521(rng);
  test_wei_points_secp256k1(rng);
  test_wei_degenerate_points_secp256k1(rng);
  test_wei_fuzzy_equality_secp256k1(rng);
  test_wei_scalar_decomposition_secp256k1(rng);
  test_wei_mul_g_p256(rng);
  test_wei_mul_p256(rng);
  test_wei_double_mul_p256(rng);
  test_wei_multi_mul_p256(rng);
  test_wei_mul_g_secp256k1(rng);
  test_wei_mul_secp256k1(rng);
  test_wei_double_mul_secp256k1(rng);
  test_wei_multi_mul_secp256k1(rng);
  test_mont_points_x25519(rng);
  test_mont_mul_g_x25519(rng);
  test_mont_mul_x25519(rng);
  test_mont_points_x448(rng);
  test_mont_mul_g_x448(rng);
  test_mont_mul_x448(rng);
  test_edwards_points_ed25519(rng);
  test_edwards_mul_g_ed25519(rng);
  test_edwards_mul_ed25519(rng);
  test_edwards_double_mul_ed25519(rng);
  test_edwards_multi_mul_ed25519(rng);
  test_edwards_points_ed448(rng);
  test_edwards_mul_g_ed448(rng);
  test_edwards_mul_ed448(rng);
  test_edwards_double_mul_ed448(rng);
  test_edwards_multi_mul_ed448(rng);
  test_ristretto_basepoint_multiples(rng);
  test_ristretto_elligator(rng);
  test_ristretto_batch_encode(rng);
}
